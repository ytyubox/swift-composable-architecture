{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"pullback"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"NewRoot"},{"kind":"text","text":">("},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"keyPath"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"WritableKeyPath","preciseIdentifier":"s:s15WritableKeyPathC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"NewRoot"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Root"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingAction","preciseIdentifier":"s:22ComposableArchitecture13BindingActionV","text":"BindingAction"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"NewRoot"},{"kind":"text","text":">"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"return-value","level":2,"type":"heading","text":"Return Value"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A binding action over a new type of root state."}]}]},{"kind":"parameters","parameters":[{"name":"keyPath","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A key path from a new type of root state to the original root state."}]}]}]},{"kind":"content","content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Useful in transforming binding actions on view state into binding actions on reducer state"},{"type":"text","text":" "},{"type":"text","text":"when the domain contains "},{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/BindableState"},{"type":"text","text":" and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/BindableAction"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, we can model an app that can bind a number to a stepper and make a network"},{"type":"text","text":" "},{"type":"text","text":"request to fetch a number fact with the following domain:"}]},{"type":"codeListing","syntax":"swift","code":["struct AppState: Equatable {","  @BindableState var count = 0","  var fact: String?","  ...","}","","enum AppAction: BindableAction {","  case binding(BindingAction<AppState>","  case factButtonTapped","  case factResponse(String?)","  ...","}","","struct AppEnvironment {","  var numberFact: (Int) -> Effect<String, Error>","  ...","}","","let appReducer = Reducer<AppState, AppAction, AppEnvironment> {","  ...","}",".binding()","","struct AppView: View {","  let store: Store","","  var view: some View {","    ...","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The view may want to limit the state and actions it has access to by introducing a"},{"type":"text","text":" "},{"type":"text","text":"view-specific domain that contains only the state and actions the view needs. Not only will"},{"type":"text","text":" "},{"type":"text","text":"this minimize the number of times a viewâ€™s "},{"type":"codeVoice","code":"body"},{"type":"text","text":" is computed, it will prevent the view"},{"type":"text","text":" "},{"type":"text","text":"from accessing state or sending actions outside its purview."}]},{"type":"codeListing","syntax":"swift","code":["extension AppView {","  struct ViewState: Equatable {","    var count: Int","    let fact: String?","    \/\/ no access to any other state on `AppState`, like child domains","  }","","  enum ViewAction: BindableAction {","    case binding(BindingAction<ViewState>)","    case factButtonTapped","    \/\/ no access to any other action on `AppAction`, like `factResponse`","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And in order to transform "},{"type":"codeVoice","code":"BindingAction<ViewState>"},{"type":"text","text":" into "},{"type":"codeVoice","code":"BindingAction<AppState>"},{"type":"text","text":", we"},{"type":"text","text":" "},{"type":"text","text":"need a writable key path from "},{"type":"codeVoice","code":"AppState"},{"type":"text","text":" to "},{"type":"codeVoice","code":"ViewState"},{"type":"text","text":", which we can get by defining a"},{"type":"text","text":" "},{"type":"text","text":"computed property with a getter and setter, where the setter can communicate any updates to"},{"type":"text","text":" "},{"type":"text","text":"bindable view state to the store:"}]},{"type":"codeListing","syntax":"swift","code":["extension AppState {","  var view: AppView.ViewState {","    get { .init(count: self.count, fact: self.fact) }","    set { self.count = newValue.count }","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Finally, in the view we can use "},{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-9iai9"},{"type":"text","text":" to pluck out view"},{"type":"text","text":" "},{"type":"text","text":"state, embed view actions, and transform binding actions between domains:"}]},{"type":"codeListing","syntax":"swift","code":["var body: some View {","  WithViewStore(","    self.store.scope(","      state: { .init(count: $0.count, fact: $0.fact) }","      action: {","        switch $0 {","        case let .binding(action):","          return .binding(action.pullback(\\.view)) \/\/ transform binding action","        case .factButtonTapped:","          return .factButtonTapped","        }","      }","    )","  ) { viewStore in","    ...","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This is a lot, though both state and action transformations could be pulled out to their own"},{"type":"text","text":" "},{"type":"text","text":"helpers. Importantly, the view has whittled away its domain and can only read state it has"},{"type":"text","text":" "},{"type":"text","text":"access to, and send actions it has access to."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/composablearchitecture\/bindingaction\/pullback(_:)"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingAction\/pullback(_:)","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Transforms a binding action over some root state to some other type of root state given a"},{"type":"text","text":" "},{"type":"text","text":"key path."}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"pullback"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"NewRoot"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"WritableKeyPath","preciseIdentifier":"s:s15WritableKeyPathC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"NewRoot"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Root"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"BindingAction","preciseIdentifier":"s:22ComposableArchitecture13BindingActionV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"NewRoot"},{"kind":"text","text":">"}],"title":"pullback(_:)","roleHeading":"Instance Method","role":"symbol","symbolKind":"method","externalID":"s:22ComposableArchitecture13BindingActionV8pullbackyACyqd__Gs15WritableKeyPathCyqd__xGlF","modules":[{"name":"ComposableArchitecture"}]},"hierarchy":{"paths":[["doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingAction"]]},"references":{"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture/BindingAction/pullback(_:)":{"role":"symbol","title":"pullback(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"pullback"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"NewRoot"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"WritableKeyPath","preciseIdentifier":"s:s15WritableKeyPathC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"NewRoot"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Root"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"BindingAction","preciseIdentifier":"s:22ComposableArchitecture13BindingActionV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"NewRoot"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Transforms a binding action over some root state to some other type of root state given a"},{"type":"text","text":" "},{"type":"text","text":"key path."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingAction\/pullback(_:)","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/bindingaction\/pullback(_:)"},"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture/Store/scope(state:action:)-9iai9":{"role":"symbol","title":"scope(state:action:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"scope"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"LocalState"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"LocalAction"},{"kind":"text","text":">("},{"kind":"externalParam","text":"state"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"LocalState"},{"kind":"text","text":", "},{"kind":"externalParam","text":"action"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"LocalAction"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Store","preciseIdentifier":"s:22ComposableArchitecture5StoreC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"LocalState"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"LocalAction"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Scopes the store to one that exposes local state and actions."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-9iai9","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/store\/scope(state:action:)-9iai9"},"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture":{"role":"collection","title":"ComposableArchitecture","abstract":[],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture"},"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture/BindingAction":{"role":"symbol","title":"BindingAction","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"BindingAction"}],"abstract":[{"type":"text","text":"An action that describes simple mutations to some root state at a writable key path."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingAction","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"BindingAction"}],"url":"\/documentation\/composablearchitecture\/bindingaction"},"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture/BindableState":{"role":"symbol","title":"BindableState","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"BindableState"}],"abstract":[{"type":"text","text":"A property wrapper type that can designate properties of app state that can be directly"},{"type":"text","text":" "},{"type":"text","text":"bindable in SwiftUI views."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/BindableState","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"BindableState"}],"url":"\/documentation\/composablearchitecture\/bindablestate"},"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture/BindableAction":{"role":"symbol","title":"BindableAction","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"BindableAction"}],"abstract":[{"type":"text","text":"An action type that exposes a "},{"type":"codeVoice","code":"binding"},{"type":"text","text":" case for the purpose of reducing."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/BindableAction","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"BindableAction"}],"url":"\/documentation\/composablearchitecture\/bindableaction"}}}