{"variants":[{"paths":["\/documentation\/composablearchitecture"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"identifier":{"url":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture","interfaceLanguage":"swift"},"topicSections":[{"title":"Classes","identifiers":["doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/TestScheduler","doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore"]},{"title":"Protocols","identifiers":["doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/CustomDebugOutputConvertible"]},{"title":"Structures","identifiers":["doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyScheduler","doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/CasePath","doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/DebugEnvironment","doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore","doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/Identified","doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray","doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore","doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/StorePublisher","doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore"]},{"title":"Functions","identifiers":["doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/extract(_:)","doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/extract(case:from:)"]},{"title":"Operators","identifiers":["doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/..(_:_:)","doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/\/(_:)-3g7oh","doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/\/(_:)-4ip4c","doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/\/(_:)-6jkr1","doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/\/(_:)-92ov9","doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/\/(_:)-9u8bh"]},{"title":"Type Aliases","identifiers":["doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/AnySchedulerOf","doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArrayOf","doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/TestSchedulerOf"]}],"kind":"symbol","metadata":{"roleHeading":"Framework","externalID":"ComposableArchitecture","title":"ComposableArchitecture","symbolKind":"module","role":"collection","modules":[{"name":"ComposableArchitecture"}]},"hierarchy":{"paths":[[]]},"references":{"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture":{"role":"collection","title":"ComposableArchitecture","abstract":[],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture"},"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture/ViewStore":{"role":"symbol","title":"ViewStore","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"ViewStore"}],"abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"ViewStore"},{"type":"text","text":" is an object that can observe state changes and send actions from a SwiftUI view."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ViewStore"}],"url":"\/documentation\/composablearchitecture\/viewstore"},"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture/extract(case:from:)":{"role":"symbol","title":"extract(case:from:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"extract"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Root"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Value"},{"kind":"text","text":">("},{"kind":"externalParam","text":"case"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Root"},{"kind":"text","text":", "},{"kind":"externalParam","text":"from"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Root"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":"?"}],"abstract":[{"type":"text","text":"Attempts to extract values associated with a given enum case initializer from a given root enum."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/extract(case:from:)","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/extract(case:from:)"},"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture/DebugEnvironment":{"role":"symbol","title":"DebugEnvironment","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"DebugEnvironment"}],"abstract":[{"type":"text","text":"An environment for debug-printing reducers."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/DebugEnvironment","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"DebugEnvironment"}],"url":"\/documentation\/composablearchitecture\/debugenvironment"},"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture//(_:)-6jkr1":{"role":"symbol","title":"\/(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"\/"},{"kind":"text","text":" "},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Root"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"Root"},{"kind":"text","text":") -> ("},{"kind":"typeIdentifier","text":"Root"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":"?"}],"abstract":[{"type":"text","text":"Returns a void case path for a case with no associated value."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/\/(_:)-6jkr1","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/\/(_:)-6jkr1"},"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture//(_:)-92ov9":{"role":"symbol","title":"\/(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"\/"},{"kind":"text","text":" "},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Root"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Value"},{"kind":"text","text":">(("},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Root"},{"kind":"text","text":") -> ("},{"kind":"typeIdentifier","text":"Root"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":"?"}],"abstract":[{"type":"text","text":"Returns a function that can attempt to extract associated values from the given enum case initializer."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/\/(_:)-92ov9","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/\/(_:)-92ov9"},"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture/CasePath":{"role":"symbol","title":"CasePath","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"CasePath"}],"abstract":[{"type":"text","text":"A path that supports embedding a value in a root and attempting to extract a rootâ€™s embedded value."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/CasePath","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"CasePath"}],"url":"\/documentation\/composablearchitecture\/casepath"},"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture//(_:)-9u8bh":{"role":"symbol","title":"\/(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"\/"},{"kind":"text","text":" "},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Root"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"Root"},{"kind":"text","text":".Type) -> "},{"kind":"typeIdentifier","text":"CasePath","preciseIdentifier":"s:22ComposableArchitecture8CasePathV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Root"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Root"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Returns the identity case path for the given type. Enables "},{"type":"codeVoice","code":"\/MyType.self"},{"type":"text","text":" syntax."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/\/(_:)-9u8bh","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/\/(_:)-9u8bh"},"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture/Store":{"role":"symbol","title":"Store","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Store"}],"abstract":[{"type":"text","text":"A store represents the runtime that powers the application. It is the object that you will pass"},{"type":"text","text":" "},{"type":"text","text":"around to views that need to interact with the application."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Store"}],"url":"\/documentation\/composablearchitecture\/store"},"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture/Effect":{"role":"symbol","title":"Effect","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Effect"}],"abstract":[{"type":"text","text":"The "},{"type":"codeVoice","code":"Effect"},{"type":"text","text":" type encapsulates a unit of work that can be run in the outside world, and can feed"},{"type":"text","text":" "},{"type":"text","text":"data back to the "},{"type":"codeVoice","code":"Store"},{"type":"text","text":". It is the perfect place to do side effects, such as network requests,"},{"type":"text","text":" "},{"type":"text","text":"saving\/loading from disk, creating timers, interacting with dependencies, and more."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Effect"}],"url":"\/documentation\/composablearchitecture\/effect"},"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture//(_:)-3g7oh":{"role":"symbol","title":"\/(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"\/"},{"kind":"text","text":" "},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Root"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"Root"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"CasePath","preciseIdentifier":"s:22ComposableArchitecture8CasePathV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Root"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Returns a void case path for a case with no associated value."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/\/(_:)-3g7oh","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/\/(_:)-3g7oh"},"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture/IfLetStore":{"role":"symbol","title":"IfLetStore","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"IfLetStore"}],"abstract":[{"type":"text","text":"A view that safely unwraps a store of optional state in order to show one of two views."},{"type":"text","text":" "},{"type":"text","text":"When the underlying state is non-"},{"type":"codeVoice","code":"nil"},{"type":"text","text":", the "},{"type":"codeVoice","code":"then"},{"type":"text","text":" closure will be performed with a "},{"type":"codeVoice","code":"Store"},{"type":"text","text":" "},{"type":"text","text":"that holds onto non-optional state, and otherwise the "},{"type":"codeVoice","code":"else"},{"type":"text","text":" closure will be performed."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"IfLetStore"}],"url":"\/documentation\/composablearchitecture\/ifletstore"},"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture/ForEachStore":{"role":"symbol","title":"ForEachStore","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ForEachStore"}],"abstract":[{"type":"text","text":"A structure that computes views on demand from a store on a collection of data."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ForEachStore"}],"url":"\/documentation\/composablearchitecture\/foreachstore"},"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture/..(_:_:)":{"role":"symbol","title":"..(_:_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":".."},{"kind":"text","text":" "},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Root"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Value"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"AppendedValue"},{"kind":"text","text":">(("},{"kind":"typeIdentifier","text":"Root"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":"?, ("},{"kind":"typeIdentifier","text":"AppendedValue"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":") -> ("},{"kind":"typeIdentifier","text":"Root"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"AppendedValue"},{"kind":"text","text":"?"}],"abstract":[{"type":"text","text":"Returns a new extract function by appending the given extract function with an embed function."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/..(_:_:)","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/'..(_:_:)"},"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture/IdentifiedArray":{"role":"symbol","title":"IdentifiedArray","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"IdentifiedArray"}],"abstract":[{"type":"text","text":"An array of elements that can be identified by a given key path."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"IdentifiedArray"}],"url":"\/documentation\/composablearchitecture\/identifiedarray"},"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture/WithViewStore":{"role":"symbol","title":"WithViewStore","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"WithViewStore"}],"abstract":[{"type":"text","text":"A structure that transforms a store into an observable view store in order to compute views from"},{"type":"text","text":" "},{"type":"text","text":"store state."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"WithViewStore"}],"url":"\/documentation\/composablearchitecture\/withviewstore"},"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture/Identified":{"role":"symbol","title":"Identified","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Identified"}],"abstract":[{"type":"text","text":"A wrapper around a value and a hashable identifier that conforms to identifiable."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/Identified","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Identified"}],"url":"\/documentation\/composablearchitecture\/identified"},"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture/TestScheduler":{"role":"symbol","title":"TestScheduler","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"TestScheduler"}],"abstract":[{"type":"text","text":"A scheduler whose current time and execution can be controlled in a deterministic manner."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/TestScheduler","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"TestScheduler"}],"url":"\/documentation\/composablearchitecture\/testscheduler"},"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture/Reducer":{"role":"symbol","title":"Reducer","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Reducer"}],"abstract":[{"type":"text","text":"A reducer describes how to evolve the current state of an application to the next state, given"},{"type":"text","text":" "},{"type":"text","text":"an action, and describes what "},{"type":"codeVoice","code":"Effect"},{"type":"text","text":"s should be executed later by the store, if any."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Reducer"}],"url":"\/documentation\/composablearchitecture\/reducer"},"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture/CustomDebugOutputConvertible":{"role":"symbol","title":"CustomDebugOutputConvertible","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"CustomDebugOutputConvertible"}],"abstract":[],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/CustomDebugOutputConvertible","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"CustomDebugOutputConvertible"}],"url":"\/documentation\/composablearchitecture\/customdebugoutputconvertible"},"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture/IdentifiedArrayOf":{"role":"symbol","title":"IdentifiedArrayOf","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"IdentifiedArrayOf"}],"abstract":[{"type":"text","text":"A convenience type to specify an "},{"type":"codeVoice","code":"IdentifiedArray"},{"type":"text","text":" by an identifiable element."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArrayOf","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"IdentifiedArrayOf"}],"url":"\/documentation\/composablearchitecture\/identifiedarrayof"},"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture/StorePublisher":{"role":"symbol","title":"StorePublisher","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"StorePublisher"}],"abstract":[{"type":"text","text":"A publisher of store state."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/StorePublisher","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"StorePublisher"}],"url":"\/documentation\/composablearchitecture\/storepublisher"},"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture/AnySchedulerOf":{"role":"symbol","title":"AnySchedulerOf","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnySchedulerOf"}],"abstract":[{"type":"text","text":"A convenience type to specify an "},{"type":"codeVoice","code":"AnyScheduler"},{"type":"text","text":" by the scheduler it wraps rather than by the"},{"type":"text","text":" "},{"type":"text","text":"time type and options type."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/AnySchedulerOf","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"AnySchedulerOf"}],"url":"\/documentation\/composablearchitecture\/anyschedulerof"},"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture/AnyScheduler":{"role":"symbol","title":"AnyScheduler","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnyScheduler"}],"abstract":[{"type":"text","text":"A type-erasing scheduler that defines when and how to execute a closure."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyScheduler","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"AnyScheduler"}],"url":"\/documentation\/composablearchitecture\/anyscheduler"},"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture/TestSchedulerOf":{"role":"symbol","title":"TestSchedulerOf","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"TestSchedulerOf"}],"abstract":[{"type":"text","text":"A convenience type to specify a "},{"type":"codeVoice","code":"TestScheduler"},{"type":"text","text":" by the scheduler it wraps rather than by the"},{"type":"text","text":" "},{"type":"text","text":"time type and options type."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/TestSchedulerOf","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"TestSchedulerOf"}],"url":"\/documentation\/composablearchitecture\/testschedulerof"},"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture/extract(_:)":{"role":"symbol","title":"extract(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"extract"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Root"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Value"},{"kind":"text","text":">(("},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Root"},{"kind":"text","text":") -> ("},{"kind":"typeIdentifier","text":"Root"},{"kind":"text","text":") -> ("},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":"?)"}],"abstract":[{"type":"text","text":"Returns a function that can attempt to extract associated values from the given enum case initializer."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/extract(_:)","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/extract(_:)"},"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture//(_:)-4ip4c":{"role":"symbol","title":"\/(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"\/"},{"kind":"text","text":" "},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Root"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Value"},{"kind":"text","text":">(("},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Root"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"CasePath","preciseIdentifier":"s:22ComposableArchitecture8CasePathV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Root"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Returns a case path for the given embed function."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/\/(_:)-4ip4c","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/\/(_:)-4ip4c"}}}