{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"FailingScheduler"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"SchedulerTimeType"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"SchedulerOptions"},{"kind":"text","text":"> "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"SchedulerTimeType"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","text":"Strideable","preciseIdentifier":"s:Sx"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"SchedulerTimeType"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Stride"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","text":"SchedulerTimeIntervalConvertible","preciseIdentifier":"s:7Combine32SchedulerTimeIntervalConvertibleP"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This scheduler can provide an additional layer of certainty that a tested code path does not"},{"type":"text","text":" "},{"type":"text","text":"require the use of a scheduler."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"As a view model becomes more complex, only some of its logic may require a scheduler. When"},{"type":"text","text":" "},{"type":"text","text":"writing unit tests for any logic that does "},{"type":"emphasis","inlineContent":[{"type":"text","text":"not"}]},{"type":"text","text":" require a scheduler, one should provide a"},{"type":"text","text":" "},{"type":"text","text":"failing scheduler, instead. This documents, directly in the test, that the feature does not"},{"type":"text","text":" "},{"type":"text","text":"use a scheduler. If it did, or ever does in the future, the test will fail."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, the following view model has a couple responsibilities:"}]},{"type":"codeListing","syntax":null,"code":["class EpisodeViewModel: ObservableObject {","  @Published var episode: Episode?","","  let apiClient: ApiClient","  let mainQueue: AnySchedulerOf<DispatchQueue>","","  init(apiClient: ApiClient, mainQueue: AnySchedulerOf<DispatchQueue>) {","    self.apiClient = apiClient","    self.mainQueue = mainQueue","  }","","  func reloadButtonTapped() {","    self.apiClient.fetchEpisode()","      .receive(on: self.mainQueue)","      .assign(to: &self.$episode)","  }","","  func favoriteButtonTapped() {","    self.episode?.isFavorite.toggle()","  }","}"]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"It lets the user tap a button to refresh some episode data"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"It lets the user toggle if the episode is one of their favorites"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The API client delivers the episode on a background queue, so the view model must receive it"},{"type":"text","text":" "},{"type":"text","text":"on its main queue before mutating its state."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Tapping the favorite button, however, involves no scheduling. This means that a test can be"},{"type":"text","text":" "},{"type":"text","text":"written with a failing scheduler:"}]},{"type":"codeListing","syntax":null,"code":["func testFavoriteButton() {","  let viewModel = EpisodeViewModel(","    apiClient: .mock,","    mainQueue: .failing","  )","  viewModel.episode = .mock","","  viewModel.favoriteButtonTapped()","  XCTAssert(viewModel.episode?.isFavorite == true)","","  viewModel.favoriteButtonTapped()","  XCTAssert(viewModel.episode?.isFavorite == false)","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"With "},{"type":"codeVoice","code":".failing"},{"type":"text","text":", this test pretty strongly declares that favoriting an episode does not need"},{"type":"text","text":" "},{"type":"text","text":"a scheduler to do the job, which means it is reasonable to assume that the feature is simple"},{"type":"text","text":" "},{"type":"text","text":"and does not involve any asynchrony."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In the future, should favoriting an episode fire off an API request that involves a scheduler,"},{"type":"text","text":" "},{"type":"text","text":"this test will begin to fail, which is a good thing! This will force us to address the"},{"type":"text","text":" "},{"type":"text","text":"complexity that was introduced. Had we used any other scheduler, it would quietly receive this"},{"type":"text","text":" "},{"type":"text","text":"additional work and the test would continue to pass."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/combineschedulers\/failingscheduler"],"traits":[{"interfaceLanguage":"swift"}]}],"relationshipsSections":[{"identifiers":["doc:\/\/co.pointfree.ComposableArchitecture\/7Combine9SchedulerP"],"kind":"relationships","title":"Conforms To","type":"conformsTo"}],"identifier":{"url":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/CombineSchedulers\/FailingScheduler","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"A scheduler that causes the current XCTest test case to fail if it is used."}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"FailingScheduler"}],"title":"FailingScheduler","roleHeading":"Structure","role":"symbol","symbolKind":"struct","externalID":"s:17CombineSchedulers16FailingSchedulerV","modules":[{"name":"CombineSchedulers"}],"navigatorTitle":[{"kind":"identifier","text":"FailingScheduler"}]},"hierarchy":{"paths":[["doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/CombineSchedulers"]]},"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/CombineSchedulers\/FailingScheduler\/init(_:now:)"]},{"title":"Instance Properties","identifiers":["doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/CombineSchedulers\/FailingScheduler\/minimumTolerance","doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/CombineSchedulers\/FailingScheduler\/now","doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/CombineSchedulers\/FailingScheduler\/prefix"]},{"title":"Instance Methods","identifiers":["doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/CombineSchedulers\/FailingScheduler\/schedule(after:interval:tolerance:options:_:)","doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/CombineSchedulers\/FailingScheduler\/schedule(after:tolerance:options:_:)","doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/CombineSchedulers\/FailingScheduler\/schedule(options:_:)"]},{"title":"Default Implementations","identifiers":["doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/CombineSchedulers\/FailingScheduler\/Scheduler-Implementations"],"generated":true}],"references":{"doc://co.pointfree.ComposableArchitecture/documentation/CombineSchedulers/FailingScheduler/schedule(options:_:)":{"role":"symbol","title":"schedule(options:_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"schedule"},{"kind":"text","text":"("},{"kind":"externalParam","text":"options"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"SchedulerOptions","preciseIdentifier":"s:17CombineSchedulers16FailingSchedulerV0D7Optionsq_mfp"},{"kind":"text","text":"?, () -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":")"}],"abstract":[],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/CombineSchedulers\/FailingScheduler\/schedule(options:_:)","kind":"symbol","type":"topic","url":"\/documentation\/combineschedulers\/failingscheduler\/schedule(options:_:)"},"doc://co.pointfree.ComposableArchitecture/documentation/CombineSchedulers/FailingScheduler/init(_:now:)":{"role":"symbol","title":"init(_:now:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":", "},{"kind":"externalParam","text":"now"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"SchedulerTimeType","preciseIdentifier":"s:17CombineSchedulers16FailingSchedulerV0D8TimeTypexmfp"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Creates a failing test scheduler with the given date."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/CombineSchedulers\/FailingScheduler\/init(_:now:)","kind":"symbol","type":"topic","url":"\/documentation\/combineschedulers\/failingscheduler\/init(_:now:)"},"doc://co.pointfree.ComposableArchitecture/documentation/CombineSchedulers/FailingScheduler/minimumTolerance":{"role":"symbol","title":"minimumTolerance","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"minimumTolerance"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"SchedulerTimeType","preciseIdentifier":"s:17CombineSchedulers16FailingSchedulerV0D8TimeTypexmfp"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Stride","preciseIdentifier":"s:Sx6StrideQa"}],"abstract":[],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/CombineSchedulers\/FailingScheduler\/minimumTolerance","kind":"symbol","type":"topic","url":"\/documentation\/combineschedulers\/failingscheduler\/minimumtolerance"},"doc://co.pointfree.ComposableArchitecture/documentation/CombineSchedulers/FailingScheduler/schedule(after:interval:tolerance:options:_:)":{"role":"symbol","title":"schedule(after:interval:tolerance:options:_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"schedule"},{"kind":"text","text":"("},{"kind":"externalParam","text":"after"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"SchedulerTimeType","preciseIdentifier":"s:17CombineSchedulers16FailingSchedulerV0D8TimeTypexmfp"},{"kind":"text","text":", "},{"kind":"externalParam","text":"interval"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"SchedulerTimeType","preciseIdentifier":"s:17CombineSchedulers16FailingSchedulerV0D8TimeTypexmfp"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Stride","preciseIdentifier":"s:Sx6StrideQa"},{"kind":"text","text":", "},{"kind":"externalParam","text":"tolerance"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"SchedulerTimeType","preciseIdentifier":"s:17CombineSchedulers16FailingSchedulerV0D8TimeTypexmfp"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Stride","preciseIdentifier":"s:Sx6StrideQa"},{"kind":"text","text":", "},{"kind":"externalParam","text":"options"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"SchedulerOptions","preciseIdentifier":"s:17CombineSchedulers16FailingSchedulerV0D7Optionsq_mfp"},{"kind":"text","text":"?, () -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Cancellable","preciseIdentifier":"s:7Combine11CancellableP"}],"abstract":[],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/CombineSchedulers\/FailingScheduler\/schedule(after:interval:tolerance:options:_:)","kind":"symbol","type":"topic","url":"\/documentation\/combineschedulers\/failingscheduler\/schedule(after:interval:tolerance:options:_:)"},"doc://co.pointfree.ComposableArchitecture/documentation/CombineSchedulers/FailingScheduler/now":{"role":"symbol","title":"now","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"now"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"SchedulerTimeType","preciseIdentifier":"s:17CombineSchedulers16FailingSchedulerV0D8TimeTypexmfp"}],"abstract":[],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/CombineSchedulers\/FailingScheduler\/now","kind":"symbol","type":"topic","url":"\/documentation\/combineschedulers\/failingscheduler\/now"},"doc://co.pointfree.ComposableArchitecture/documentation/CombineSchedulers/FailingScheduler/prefix":{"role":"symbol","title":"prefix","fragments":[{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"prefix"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"}],"abstract":[],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/CombineSchedulers\/FailingScheduler\/prefix","kind":"symbol","type":"topic","url":"\/documentation\/combineschedulers\/failingscheduler\/prefix"},"doc://co.pointfree.ComposableArchitecture/documentation/CombineSchedulers/FailingScheduler":{"role":"symbol","title":"FailingScheduler","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"FailingScheduler"}],"abstract":[{"type":"text","text":"A scheduler that causes the current XCTest test case to fail if it is used."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/CombineSchedulers\/FailingScheduler","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"FailingScheduler"}],"url":"\/documentation\/combineschedulers\/failingscheduler"},"doc://co.pointfree.ComposableArchitecture/7Combine9SchedulerP":{"type":"unresolvable","title":"Combine.Scheduler","identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/7Combine9SchedulerP"},"doc://co.pointfree.ComposableArchitecture/documentation/CombineSchedulers/FailingScheduler/Scheduler-Implementations":{"role":"collectionGroup","title":"Scheduler Implementations","abstract":[],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/CombineSchedulers\/FailingScheduler\/Scheduler-Implementations","kind":"article","type":"topic","url":"\/documentation\/combineschedulers\/failingscheduler\/scheduler-implementations"},"doc://co.pointfree.ComposableArchitecture/documentation/CombineSchedulers/FailingScheduler/schedule(after:tolerance:options:_:)":{"role":"symbol","title":"schedule(after:tolerance:options:_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"schedule"},{"kind":"text","text":"("},{"kind":"externalParam","text":"after"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"SchedulerTimeType","preciseIdentifier":"s:17CombineSchedulers16FailingSchedulerV0D8TimeTypexmfp"},{"kind":"text","text":", "},{"kind":"externalParam","text":"tolerance"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"SchedulerTimeType","preciseIdentifier":"s:17CombineSchedulers16FailingSchedulerV0D8TimeTypexmfp"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Stride","preciseIdentifier":"s:Sx6StrideQa"},{"kind":"text","text":", "},{"kind":"externalParam","text":"options"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"SchedulerOptions","preciseIdentifier":"s:17CombineSchedulers16FailingSchedulerV0D7Optionsq_mfp"},{"kind":"text","text":"?, () -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":")"}],"abstract":[],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/CombineSchedulers\/FailingScheduler\/schedule(after:tolerance:options:_:)","kind":"symbol","type":"topic","url":"\/documentation\/combineschedulers\/failingscheduler\/schedule(after:tolerance:options:_:)"},"doc://co.pointfree.ComposableArchitecture/documentation/CombineSchedulers":{"role":"collection","title":"CombineSchedulers","abstract":[],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/CombineSchedulers","kind":"symbol","type":"topic","url":"\/documentation\/combineschedulers"}}}