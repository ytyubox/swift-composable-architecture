{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnyScheduler"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"SchedulerTimeType"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"SchedulerOptions"},{"kind":"text","text":"> "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"SchedulerTimeType"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","text":"Strideable","preciseIdentifier":"s:Sx"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"SchedulerTimeType"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Stride"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","text":"SchedulerTimeIntervalConvertible","preciseIdentifier":"s:7Combine32SchedulerTimeIntervalConvertibleP"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This type is useful for times that you want to be able to customize the scheduler used in some"},{"type":"text","text":" "},{"type":"text","text":"code from the outside, but you don’t want to introduce a generic to make it customizable. For"},{"type":"text","text":" "},{"type":"text","text":"example, suppose you have a view model "},{"type":"codeVoice","code":"ObservableObject"},{"type":"text","text":" that performs an API request when a"},{"type":"text","text":" "},{"type":"text","text":"method is called:"}]},{"type":"codeListing","syntax":null,"code":["class EpisodeViewModel: ObservableObject {","  @Published var episode: Episode?","","  let apiClient: ApiClient","","  init(apiClient: ApiClient) {","    self.apiClient = apiClient","  }","","  func reloadButtonTapped() {","    self.apiClient.fetchEpisode()","      .receive(on: DispatchQueue.main)","      .assign(to: &self.$episode)","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Notice that we are using "},{"type":"codeVoice","code":"DispatchQueue.main"},{"type":"text","text":" in the "},{"type":"codeVoice","code":"reloadButtonTapped"},{"type":"text","text":" method because the"},{"type":"text","text":" "},{"type":"codeVoice","code":"fetchEpisode"},{"type":"text","text":" endpoint most likely delivers its output on a background thread (as is the case"},{"type":"text","text":" "},{"type":"text","text":"with "},{"type":"codeVoice","code":"URLSession"},{"type":"text","text":")."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This code seems innocent enough, but the presence of "},{"type":"codeVoice","code":".receive(on: DispatchQueue.main)"},{"type":"text","text":" makes"},{"type":"text","text":" "},{"type":"text","text":"this code harder to test since you have to use "},{"type":"codeVoice","code":"XCTest"},{"type":"text","text":" expectations to explicitly wait a small"},{"type":"text","text":" "},{"type":"text","text":"amount of time for the queue to execute. This can lead to flakiness in tests and make test"},{"type":"text","text":" "},{"type":"text","text":"suites take longer to execute than necessary."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"One way to fix this testing problem is to use an “immediate” scheduler instead of"},{"type":"text","text":" "},{"type":"codeVoice","code":"DispatchQueue.main"},{"type":"text","text":", which will cause "},{"type":"codeVoice","code":"fetchEpisode"},{"type":"text","text":" to deliver its output as soon as possible"},{"type":"text","text":" "},{"type":"text","text":"with no thread hops. In order to allow for this we would need to inject a scheduler into our"},{"type":"text","text":" "},{"type":"text","text":"view model so that we can control it from the outside:"}]},{"type":"codeListing","syntax":null,"code":["class EpisodeViewModel<S: Scheduler>: ObservableObject {","  @Published var episode: Episode?","","  let apiClient: ApiClient","  let scheduler: S","","  init(apiClient: ApiClient, scheduler: S) {","    self.apiClient = apiClient","    self.scheduler = scheduler","  }","","  func reloadButtonTapped() {","    self.apiClient.fetchEpisode()","      .receive(on: self.scheduler)","      .assign(to: &self.$episode)","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Now we can initialize this view model in production by using "},{"type":"codeVoice","code":"DispatchQueue.main"},{"type":"text","text":" and we can"},{"type":"text","text":" "},{"type":"text","text":"initialize it in tests using "},{"type":"codeVoice","code":"DispatchQueue.immediate"},{"type":"text","text":". Sounds like a win!"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, introducing this generic to our view model is quite heavyweight as it is loudly"},{"type":"text","text":" "},{"type":"text","text":"announcing to the outside world that this type uses a scheduler, and worse it will end up"},{"type":"text","text":" "},{"type":"text","text":"infecting any code that touches this view model that also wants to be testable. For example,"},{"type":"text","text":" "},{"type":"text","text":"any view that uses this view model will need to introduce a generic if it wants to also be able"},{"type":"text","text":" "},{"type":"text","text":"to control the scheduler, which would be useful if we wanted to write snapshot tests."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Instead of introducing a generic to allow for substituting in different schedulers we can use"},{"type":"text","text":" "},{"type":"codeVoice","code":"AnyScheduler"},{"type":"text","text":". It allows us to be somewhat generic in the scheduler, but without actually"},{"type":"text","text":" "},{"type":"text","text":"introducing a generic."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Instead of holding a generic scheduler in our view model we can say that we only want a"},{"type":"text","text":" "},{"type":"text","text":"scheduler whose associated types match that of "},{"type":"codeVoice","code":"DispatchQueue"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":null,"code":["class EpisodeViewModel: ObservableObject {","  @Published var episode: Episode?","","  let apiClient: ApiClient","  let scheduler: AnySchedulerOf<DispatchQueue>","","  init(apiClient: ApiClient, scheduler: AnySchedulerOf<DispatchQueue>) {","    self.apiClient = apiClient","    self.scheduler = scheduler","  }","","  func reloadButtonTapped() {","    self.apiClient.fetchEpisode()","      .receive(on: self.scheduler)","      .assign(to: &self.$episode)","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Then, in production we can create a view model that uses a live "},{"type":"codeVoice","code":"DispatchQueue"},{"type":"text","text":", but we just"},{"type":"text","text":" "},{"type":"text","text":"have to first erase its type:"}]},{"type":"codeListing","syntax":null,"code":["let viewModel = EpisodeViewModel(","  apiClient: ...,","  scheduler: DispatchQueue.main.eraseToAnyScheduler()",")"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For common schedulers, like "},{"type":"codeVoice","code":"DispatchQueue"},{"type":"text","text":", "},{"type":"codeVoice","code":"OperationQueue"},{"type":"text","text":", and "},{"type":"codeVoice","code":"RunLoop"},{"type":"text","text":", there is even a"},{"type":"text","text":" "},{"type":"text","text":"static helper on "},{"type":"codeVoice","code":"AnyScheduler"},{"type":"text","text":" that further simplifies this:"}]},{"type":"codeListing","syntax":null,"code":["let viewModel = EpisodeViewModel(","  apiClient: ...,","  scheduler: .main",")"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And in tests we can use an immediate scheduler:"}]},{"type":"codeListing","syntax":null,"code":["let viewModel = EpisodeViewModel(","  apiClient: ...,","  scheduler: .immediate",")"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"So, in general, "},{"type":"codeVoice","code":"AnyScheduler"},{"type":"text","text":" is great for allowing one to control what scheduler is used"},{"type":"text","text":" "},{"type":"text","text":"in classes, functions, etc. without needing to introduce a generic, which can help simplify"},{"type":"text","text":" "},{"type":"text","text":"the code and reduce implementation details from leaking out."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/combineschedulers\/anyscheduler"],"traits":[{"interfaceLanguage":"swift"}]}],"relationshipsSections":[{"identifiers":["doc:\/\/co.pointfree.ComposableArchitecture\/7Combine9SchedulerP"],"kind":"relationships","title":"Conforms To","type":"conformsTo"}],"identifier":{"url":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/CombineSchedulers\/AnyScheduler","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"A type-erasing wrapper for the "},{"type":"codeVoice","code":"Scheduler"},{"type":"text","text":" protocol, which can be useful for being generic over"},{"type":"text","text":" "},{"type":"text","text":"many types of schedulers without needing to actually introduce a generic to your code."}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnyScheduler"}],"title":"AnyScheduler","roleHeading":"Structure","role":"symbol","symbolKind":"struct","externalID":"s:17CombineSchedulers12AnySchedulerV","modules":[{"name":"CombineSchedulers"}],"navigatorTitle":[{"kind":"identifier","text":"AnyScheduler"}]},"hierarchy":{"paths":[["doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/CombineSchedulers"]]},"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/CombineSchedulers\/AnyScheduler\/init(_:)","doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/CombineSchedulers\/AnyScheduler\/init(minimumTolerance:now:scheduleImmediately:delayed:interval:)"]},{"title":"Instance Properties","identifiers":["doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/CombineSchedulers\/AnyScheduler\/minimumTolerance","doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/CombineSchedulers\/AnyScheduler\/now"]},{"title":"Instance Methods","identifiers":["doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/CombineSchedulers\/AnyScheduler\/schedule(after:interval:tolerance:options:_:)","doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/CombineSchedulers\/AnyScheduler\/schedule(after:tolerance:options:_:)","doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/CombineSchedulers\/AnyScheduler\/schedule(options:_:)"]},{"title":"Type Properties","identifiers":["doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/CombineSchedulers\/AnyScheduler\/failing-1wd8w","doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/CombineSchedulers\/AnyScheduler\/failing-6rks3","doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/CombineSchedulers\/AnyScheduler\/failing-72aqv","doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/CombineSchedulers\/AnyScheduler\/immediate-52iwi","doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/CombineSchedulers\/AnyScheduler\/immediate-6fs4i","doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/CombineSchedulers\/AnyScheduler\/immediate-7t04g","doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/CombineSchedulers\/AnyScheduler\/main-2ccke","doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/CombineSchedulers\/AnyScheduler\/main-4xd6t","doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/CombineSchedulers\/AnyScheduler\/main-9vmjt"]},{"title":"Type Methods","identifiers":["doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/CombineSchedulers\/AnyScheduler\/failing(_:)-20w14","doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/CombineSchedulers\/AnyScheduler\/failing(_:)-2402o","doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/CombineSchedulers\/AnyScheduler\/failing(_:)-64ryl"]},{"title":"Default Implementations","identifiers":["doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/CombineSchedulers\/AnyScheduler\/Scheduler-Implementations"],"generated":true}],"references":{"doc://co.pointfree.ComposableArchitecture/documentation/CombineSchedulers/AnyScheduler/immediate-52iwi":{"conformance":{"constraints":[{"type":"codeVoice","code":"SchedulerTimeType"},{"type":"text","text":" is "},{"type":"codeVoice","code":"RunLoop.SchedulerTimeType"},{"type":"text","text":" and "},{"type":"codeVoice","code":"SchedulerOptions"},{"type":"text","text":" is "},{"type":"codeVoice","code":"RunLoop.SchedulerOptions"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"immediate","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"immediate"},{"kind":"text","text":": `Self`"}],"abstract":[{"type":"text","text":"An immediate scheduler that can substitute itself for a run loop."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/CombineSchedulers\/AnyScheduler\/immediate-52iwi","kind":"symbol","type":"topic","url":"\/documentation\/combineschedulers\/anyscheduler\/immediate-52iwi"},"doc://co.pointfree.ComposableArchitecture/documentation/CombineSchedulers/AnyScheduler/schedule(after:tolerance:options:_:)":{"role":"symbol","title":"schedule(after:tolerance:options:_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"schedule"},{"kind":"text","text":"("},{"kind":"externalParam","text":"after"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"SchedulerTimeType","preciseIdentifier":"s:17CombineSchedulers12AnySchedulerV0D8TimeTypexmfp"},{"kind":"text","text":", "},{"kind":"externalParam","text":"tolerance"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"SchedulerTimeType","preciseIdentifier":"s:17CombineSchedulers12AnySchedulerV0D8TimeTypexmfp"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Stride","preciseIdentifier":"s:Sx6StrideQa"},{"kind":"text","text":", "},{"kind":"externalParam","text":"options"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"SchedulerOptions","preciseIdentifier":"s:17CombineSchedulers12AnySchedulerV0D7Optionsq_mfp"},{"kind":"text","text":"?, () -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Performs the action at some time after the specified date."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/CombineSchedulers\/AnyScheduler\/schedule(after:tolerance:options:_:)","kind":"symbol","type":"topic","url":"\/documentation\/combineschedulers\/anyscheduler\/schedule(after:tolerance:options:_:)"},"doc://co.pointfree.ComposableArchitecture/documentation/CombineSchedulers/AnyScheduler/failing(_:)-2402o":{"conformance":{"constraints":[{"type":"codeVoice","code":"SchedulerTimeType"},{"type":"text","text":" is "},{"type":"codeVoice","code":"RunLoop.SchedulerTimeType"},{"type":"text","text":" and "},{"type":"codeVoice","code":"SchedulerOptions"},{"type":"text","text":" is "},{"type":"codeVoice","code":"RunLoop.SchedulerOptions"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"failing(_:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"failing"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"AnyScheduler","preciseIdentifier":"s:17CombineSchedulers12AnySchedulerV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"SchedulerTimeType"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"SchedulerOptions"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"A failing scheduler that can substitute itself for a run loop."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/CombineSchedulers\/AnyScheduler\/failing(_:)-2402o","kind":"symbol","type":"topic","url":"\/documentation\/combineschedulers\/anyscheduler\/failing(_:)-2402o"},"doc://co.pointfree.ComposableArchitecture/documentation/CombineSchedulers/AnyScheduler/main-4xd6t":{"conformance":{"constraints":[{"type":"codeVoice","code":"SchedulerTimeType"},{"type":"text","text":" is "},{"type":"codeVoice","code":"OperationQueue.SchedulerTimeType"},{"type":"text","text":" and "},{"type":"codeVoice","code":"SchedulerOptions"},{"type":"text","text":" is "},{"type":"codeVoice","code":"OperationQueue.SchedulerOptions"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"main","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"main"},{"kind":"text","text":": `Self`"}],"abstract":[{"type":"text","text":"A type-erased main operation queue."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/CombineSchedulers\/AnyScheduler\/main-4xd6t","kind":"symbol","type":"topic","url":"\/documentation\/combineschedulers\/anyscheduler\/main-4xd6t"},"doc://co.pointfree.ComposableArchitecture/documentation/CombineSchedulers/AnyScheduler/main-9vmjt":{"conformance":{"constraints":[{"type":"codeVoice","code":"SchedulerTimeType"},{"type":"text","text":" is "},{"type":"codeVoice","code":"DispatchQueue.SchedulerTimeType"},{"type":"text","text":" and "},{"type":"codeVoice","code":"SchedulerOptions"},{"type":"text","text":" is "},{"type":"codeVoice","code":"DispatchQueue.SchedulerOptions"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"main","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"main"},{"kind":"text","text":": `Self`"}],"abstract":[{"type":"text","text":"A type-erased main dispatch queue."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/CombineSchedulers\/AnyScheduler\/main-9vmjt","kind":"symbol","type":"topic","url":"\/documentation\/combineschedulers\/anyscheduler\/main-9vmjt"},"doc://co.pointfree.ComposableArchitecture/documentation/CombineSchedulers/AnyScheduler/failing(_:)-64ryl":{"conformance":{"constraints":[{"type":"codeVoice","code":"SchedulerTimeType"},{"type":"text","text":" is "},{"type":"codeVoice","code":"DispatchQueue.SchedulerTimeType"},{"type":"text","text":" and "},{"type":"codeVoice","code":"SchedulerOptions"},{"type":"text","text":" is "},{"type":"codeVoice","code":"DispatchQueue.SchedulerOptions"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"failing(_:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"failing"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"AnyScheduler","preciseIdentifier":"s:17CombineSchedulers12AnySchedulerV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"SchedulerTimeType"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"SchedulerOptions"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"A failing scheduler that can substitute itself for a dispatch queue."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/CombineSchedulers\/AnyScheduler\/failing(_:)-64ryl","kind":"symbol","type":"topic","url":"\/documentation\/combineschedulers\/anyscheduler\/failing(_:)-64ryl"},"doc://co.pointfree.ComposableArchitecture/documentation/CombineSchedulers/AnyScheduler/init(_:)":{"role":"symbol","title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"S"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"S","preciseIdentifier":"s:17CombineSchedulers12AnySchedulerVyACyxq_Gqd__c0D8TimeTypeQyd__Rsz0D7OptionsQyd__Rs_0A00D0Rd__lufc1SL_qd__mfp"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Creates a type-erasing scheduler to wrap the provided scheduler."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/CombineSchedulers\/AnyScheduler\/init(_:)","kind":"symbol","type":"topic","url":"\/documentation\/combineschedulers\/anyscheduler\/init(_:)"},"doc://co.pointfree.ComposableArchitecture/documentation/CombineSchedulers/AnyScheduler/main-2ccke":{"conformance":{"constraints":[{"type":"codeVoice","code":"SchedulerTimeType"},{"type":"text","text":" is "},{"type":"codeVoice","code":"RunLoop.SchedulerTimeType"},{"type":"text","text":" and "},{"type":"codeVoice","code":"SchedulerOptions"},{"type":"text","text":" is "},{"type":"codeVoice","code":"RunLoop.SchedulerOptions"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"main","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"main"},{"kind":"text","text":": `Self`"}],"abstract":[{"type":"text","text":"A type-erased main run loop."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/CombineSchedulers\/AnyScheduler\/main-2ccke","kind":"symbol","type":"topic","url":"\/documentation\/combineschedulers\/anyscheduler\/main-2ccke"},"doc://co.pointfree.ComposableArchitecture/documentation/CombineSchedulers/AnyScheduler/now":{"role":"symbol","title":"now","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"now"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"SchedulerTimeType","preciseIdentifier":"s:17CombineSchedulers12AnySchedulerV0D8TimeTypexmfp"}],"abstract":[{"type":"text","text":"This scheduler’s definition of the current moment in time."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/CombineSchedulers\/AnyScheduler\/now","kind":"symbol","type":"topic","url":"\/documentation\/combineschedulers\/anyscheduler\/now"},"doc://co.pointfree.ComposableArchitecture/7Combine9SchedulerP":{"type":"unresolvable","title":"Combine.Scheduler","identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/7Combine9SchedulerP"},"doc://co.pointfree.ComposableArchitecture/documentation/CombineSchedulers/AnyScheduler/immediate-6fs4i":{"conformance":{"constraints":[{"type":"codeVoice","code":"SchedulerTimeType"},{"type":"text","text":" is "},{"type":"codeVoice","code":"DispatchQueue.SchedulerTimeType"},{"type":"text","text":" and "},{"type":"codeVoice","code":"SchedulerOptions"},{"type":"text","text":" is "},{"type":"codeVoice","code":"DispatchQueue.SchedulerOptions"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"immediate","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"immediate"},{"kind":"text","text":": `Self`"}],"abstract":[{"type":"text","text":"An immediate scheduler that can substitute itself for a dispatch queue."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/CombineSchedulers\/AnyScheduler\/immediate-6fs4i","kind":"symbol","type":"topic","url":"\/documentation\/combineschedulers\/anyscheduler\/immediate-6fs4i"},"doc://co.pointfree.ComposableArchitecture/documentation/CombineSchedulers":{"role":"collection","title":"CombineSchedulers","abstract":[],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/CombineSchedulers","kind":"symbol","type":"topic","url":"\/documentation\/combineschedulers"},"doc://co.pointfree.ComposableArchitecture/documentation/CombineSchedulers/AnyScheduler/immediate-7t04g":{"conformance":{"constraints":[{"type":"codeVoice","code":"SchedulerTimeType"},{"type":"text","text":" is "},{"type":"codeVoice","code":"OperationQueue.SchedulerTimeType"},{"type":"text","text":" and "},{"type":"codeVoice","code":"SchedulerOptions"},{"type":"text","text":" is "},{"type":"codeVoice","code":"OperationQueue.SchedulerOptions"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"immediate","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"immediate"},{"kind":"text","text":": `Self`"}],"abstract":[{"type":"text","text":"An immediate scheduler that can substitute itself for an operation queue."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/CombineSchedulers\/AnyScheduler\/immediate-7t04g","kind":"symbol","type":"topic","url":"\/documentation\/combineschedulers\/anyscheduler\/immediate-7t04g"},"doc://co.pointfree.ComposableArchitecture/documentation/CombineSchedulers/AnyScheduler/minimumTolerance":{"role":"symbol","title":"minimumTolerance","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"minimumTolerance"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"SchedulerTimeType","preciseIdentifier":"s:17CombineSchedulers12AnySchedulerV0D8TimeTypexmfp"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Stride","preciseIdentifier":"s:Sx6StrideQa"}],"abstract":[{"type":"text","text":"The minimum tolerance allowed by the scheduler."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/CombineSchedulers\/AnyScheduler\/minimumTolerance","kind":"symbol","type":"topic","url":"\/documentation\/combineschedulers\/anyscheduler\/minimumtolerance"},"doc://co.pointfree.ComposableArchitecture/documentation/CombineSchedulers/AnyScheduler/failing(_:)-20w14":{"conformance":{"constraints":[{"type":"codeVoice","code":"SchedulerTimeType"},{"type":"text","text":" is "},{"type":"codeVoice","code":"OperationQueue.SchedulerTimeType"},{"type":"text","text":" and "},{"type":"codeVoice","code":"SchedulerOptions"},{"type":"text","text":" is "},{"type":"codeVoice","code":"OperationQueue.SchedulerOptions"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"failing(_:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"failing"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"AnyScheduler","preciseIdentifier":"s:17CombineSchedulers12AnySchedulerV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"SchedulerTimeType"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"SchedulerOptions"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"A failing scheduler that can substitute itself for an operation queue."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/CombineSchedulers\/AnyScheduler\/failing(_:)-20w14","kind":"symbol","type":"topic","url":"\/documentation\/combineschedulers\/anyscheduler\/failing(_:)-20w14"},"doc://co.pointfree.ComposableArchitecture/documentation/CombineSchedulers/AnyScheduler":{"role":"symbol","title":"AnyScheduler","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnyScheduler"}],"abstract":[{"type":"text","text":"A type-erasing wrapper for the "},{"type":"codeVoice","code":"Scheduler"},{"type":"text","text":" protocol, which can be useful for being generic over"},{"type":"text","text":" "},{"type":"text","text":"many types of schedulers without needing to actually introduce a generic to your code."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/CombineSchedulers\/AnyScheduler","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"AnyScheduler"}],"url":"\/documentation\/combineschedulers\/anyscheduler"},"doc://co.pointfree.ComposableArchitecture/documentation/CombineSchedulers/AnyScheduler/failing-6rks3":{"conformance":{"constraints":[{"type":"codeVoice","code":"SchedulerTimeType"},{"type":"text","text":" is "},{"type":"codeVoice","code":"RunLoop.SchedulerTimeType"},{"type":"text","text":" and "},{"type":"codeVoice","code":"SchedulerOptions"},{"type":"text","text":" is "},{"type":"codeVoice","code":"RunLoop.SchedulerOptions"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"failing","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"failing"},{"kind":"text","text":": `Self`"}],"abstract":[{"type":"text","text":"A failing scheduler that can substitute itself for a run loop."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/CombineSchedulers\/AnyScheduler\/failing-6rks3","kind":"symbol","type":"topic","url":"\/documentation\/combineschedulers\/anyscheduler\/failing-6rks3"},"doc://co.pointfree.ComposableArchitecture/documentation/CombineSchedulers/AnyScheduler/schedule(after:interval:tolerance:options:_:)":{"role":"symbol","title":"schedule(after:interval:tolerance:options:_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"schedule"},{"kind":"text","text":"("},{"kind":"externalParam","text":"after"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"SchedulerTimeType","preciseIdentifier":"s:17CombineSchedulers12AnySchedulerV0D8TimeTypexmfp"},{"kind":"text","text":", "},{"kind":"externalParam","text":"interval"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"SchedulerTimeType","preciseIdentifier":"s:17CombineSchedulers12AnySchedulerV0D8TimeTypexmfp"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Stride","preciseIdentifier":"s:Sx6StrideQa"},{"kind":"text","text":", "},{"kind":"externalParam","text":"tolerance"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"SchedulerTimeType","preciseIdentifier":"s:17CombineSchedulers12AnySchedulerV0D8TimeTypexmfp"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Stride","preciseIdentifier":"s:Sx6StrideQa"},{"kind":"text","text":", "},{"kind":"externalParam","text":"options"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"SchedulerOptions","preciseIdentifier":"s:17CombineSchedulers12AnySchedulerV0D7Optionsq_mfp"},{"kind":"text","text":"?, () -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Cancellable","preciseIdentifier":"s:7Combine11CancellableP"}],"abstract":[{"type":"text","text":"Performs the action at some time after the specified date, at the"},{"type":"text","text":" "},{"type":"text","text":"specified frequency, taking into account tolerance if possible."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/CombineSchedulers\/AnyScheduler\/schedule(after:interval:tolerance:options:_:)","kind":"symbol","type":"topic","url":"\/documentation\/combineschedulers\/anyscheduler\/schedule(after:interval:tolerance:options:_:)"},"doc://co.pointfree.ComposableArchitecture/documentation/CombineSchedulers/AnyScheduler/init(minimumTolerance:now:scheduleImmediately:delayed:interval:)":{"role":"symbol","title":"init(minimumTolerance:now:scheduleImmediately:delayed:interval:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"minimumTolerance"},{"kind":"text","text":": () -> "},{"kind":"typeIdentifier","text":"SchedulerTimeType","preciseIdentifier":"s:17CombineSchedulers12AnySchedulerV0D8TimeTypexmfp"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Stride","preciseIdentifier":"s:Sx6StrideQa"},{"kind":"text","text":", "},{"kind":"externalParam","text":"now"},{"kind":"text","text":": () -> "},{"kind":"typeIdentifier","text":"SchedulerTimeType","preciseIdentifier":"s:17CombineSchedulers12AnySchedulerV0D8TimeTypexmfp"},{"kind":"text","text":", "},{"kind":"externalParam","text":"scheduleImmediately"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"SchedulerOptions","preciseIdentifier":"s:17CombineSchedulers12AnySchedulerV0D7Optionsq_mfp"},{"kind":"text","text":"?, () -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":", "},{"kind":"externalParam","text":"delayed"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"SchedulerTimeType","preciseIdentifier":"s:17CombineSchedulers12AnySchedulerV0D8TimeTypexmfp"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"SchedulerTimeType","preciseIdentifier":"s:17CombineSchedulers12AnySchedulerV0D8TimeTypexmfp"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Stride","preciseIdentifier":"s:Sx6StrideQa"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"SchedulerOptions","preciseIdentifier":"s:17CombineSchedulers12AnySchedulerV0D7Optionsq_mfp"},{"kind":"text","text":"?, () -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":", "},{"kind":"externalParam","text":"interval"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"SchedulerTimeType","preciseIdentifier":"s:17CombineSchedulers12AnySchedulerV0D8TimeTypexmfp"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"SchedulerTimeType","preciseIdentifier":"s:17CombineSchedulers12AnySchedulerV0D8TimeTypexmfp"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Stride","preciseIdentifier":"s:Sx6StrideQa"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"SchedulerTimeType","preciseIdentifier":"s:17CombineSchedulers12AnySchedulerV0D8TimeTypexmfp"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Stride","preciseIdentifier":"s:Sx6StrideQa"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"SchedulerOptions","preciseIdentifier":"s:17CombineSchedulers12AnySchedulerV0D7Optionsq_mfp"},{"kind":"text","text":"?, () -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Cancellable","preciseIdentifier":"s:7Combine11CancellableP"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Creates a type-erasing scheduler to wrap the provided endpoints."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/CombineSchedulers\/AnyScheduler\/init(minimumTolerance:now:scheduleImmediately:delayed:interval:)","kind":"symbol","type":"topic","url":"\/documentation\/combineschedulers\/anyscheduler\/init(minimumtolerance:now:scheduleimmediately:delayed:interval:)"},"doc://co.pointfree.ComposableArchitecture/documentation/CombineSchedulers/AnyScheduler/schedule(options:_:)":{"role":"symbol","title":"schedule(options:_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"schedule"},{"kind":"text","text":"("},{"kind":"externalParam","text":"options"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"SchedulerOptions","preciseIdentifier":"s:17CombineSchedulers12AnySchedulerV0D7Optionsq_mfp"},{"kind":"text","text":"?, () -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Performs the action at the next possible opportunity."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/CombineSchedulers\/AnyScheduler\/schedule(options:_:)","kind":"symbol","type":"topic","url":"\/documentation\/combineschedulers\/anyscheduler\/schedule(options:_:)"},"doc://co.pointfree.ComposableArchitecture/documentation/CombineSchedulers/AnyScheduler/failing-1wd8w":{"conformance":{"constraints":[{"type":"codeVoice","code":"SchedulerTimeType"},{"type":"text","text":" is "},{"type":"codeVoice","code":"DispatchQueue.SchedulerTimeType"},{"type":"text","text":" and "},{"type":"codeVoice","code":"SchedulerOptions"},{"type":"text","text":" is "},{"type":"codeVoice","code":"DispatchQueue.SchedulerOptions"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"failing","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"failing"},{"kind":"text","text":": `Self`"}],"abstract":[{"type":"text","text":"A failing scheduler that can substitute itself for a dispatch queue."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/CombineSchedulers\/AnyScheduler\/failing-1wd8w","kind":"symbol","type":"topic","url":"\/documentation\/combineschedulers\/anyscheduler\/failing-1wd8w"},"doc://co.pointfree.ComposableArchitecture/documentation/CombineSchedulers/AnyScheduler/Scheduler-Implementations":{"role":"collectionGroup","title":"Scheduler Implementations","abstract":[],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/CombineSchedulers\/AnyScheduler\/Scheduler-Implementations","kind":"article","type":"topic","url":"\/documentation\/combineschedulers\/anyscheduler\/scheduler-implementations"},"doc://co.pointfree.ComposableArchitecture/documentation/CombineSchedulers/AnyScheduler/failing-72aqv":{"conformance":{"constraints":[{"type":"codeVoice","code":"SchedulerTimeType"},{"type":"text","text":" is "},{"type":"codeVoice","code":"OperationQueue.SchedulerTimeType"},{"type":"text","text":" and "},{"type":"codeVoice","code":"SchedulerOptions"},{"type":"text","text":" is "},{"type":"codeVoice","code":"OperationQueue.SchedulerOptions"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"failing","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"failing"},{"kind":"text","text":": `Self`"}],"abstract":[{"type":"text","text":"A failing scheduler that can substitute itself for an operation queue."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/CombineSchedulers\/AnyScheduler\/failing-72aqv","kind":"symbol","type":"topic","url":"\/documentation\/combineschedulers\/anyscheduler\/failing-72aqv"}}}