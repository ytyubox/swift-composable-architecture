{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ImmediateScheduler"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"SchedulerTimeType"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"SchedulerOptions"},{"kind":"text","text":"> "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"SchedulerTimeType"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","text":"Strideable","preciseIdentifier":"s:Sx"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"SchedulerTimeType"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Stride"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","text":"SchedulerTimeIntervalConvertible","preciseIdentifier":"s:7Combine32SchedulerTimeIntervalConvertibleP"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can only use this scheduler for immediate actions. If you attempt to schedule actions"},{"type":"text","text":" "},{"type":"text","text":"after a specific date, this scheduler ignores the date and performs them immediately."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This scheduler is useful for writing tests against publishers that use asynchrony operators,"},{"type":"text","text":" "},{"type":"text","text":"such as "},{"type":"codeVoice","code":"receive(on:)"},{"type":"text","text":", "},{"type":"codeVoice","code":"subscribe(on:)"},{"type":"text","text":" and others, because it forces the publisher to emit"},{"type":"text","text":" "},{"type":"text","text":"immediately rather than needing to wait for thread hops or delays using "},{"type":"codeVoice","code":"XCTestExpectation"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This scheduler is different from "},{"type":"codeVoice","code":"TestScheduler"},{"type":"text","text":" in that you cannot explicitly control how"},{"type":"text","text":" "},{"type":"text","text":"time flows through your publisher, but rather you are instantly collapsing time into a single"},{"type":"text","text":" "},{"type":"text","text":"point."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"As a basic example, suppose you have a view model that loads some data after waiting for 10"},{"type":"text","text":" "},{"type":"text","text":"seconds from when a button is tapped:"}]},{"type":"codeListing","syntax":null,"code":["class HomeViewModel: ObservableObject {","  @Published var episodes: [Episode]?","","  let apiClient: ApiClient","","  init(apiClient: ApiClient) {","    self.apiClient = apiClient","  }","","  func reloadButtonTapped() {","    Just(())","      .delay(for: .seconds(10), scheduler: DispachQueue.main)","      .flatMap { apiClient.fetchEpisodes() }","      .assign(to: &self.episodes)","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In order to test this code you would literally need to wait 10 seconds for the publisher to"},{"type":"text","text":" "},{"type":"text","text":"emit:"}]},{"type":"codeListing","syntax":null,"code":["func testViewModel() {","  let viewModel = HomeViewModel(apiClient: .mock)","","  viewModel.reloadButtonTapped()","","  _ = XCTWaiter.wait(for: [XCTestExpectation()], timeout: 10)","","  XCTAssert(viewModel.episodes, [Episode(id: 42)])","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Alternatively, we can explicitly pass a scheduler into the view model initializer so that it"},{"type":"text","text":" "},{"type":"text","text":"can be controller from the outside:"}]},{"type":"codeListing","syntax":null,"code":["class HomeViewModel: ObservableObject {","  @Published var episodes: [Episode]?","","  let apiClient: ApiClient","  let scheduler: AnySchedulerOf<DispatchQueue>","","  init(apiClient: ApiClient, scheduler: AnySchedulerOf<DispatchQueue>) {","    self.apiClient = apiClient","    self.scheduler = scheduler","  }","","  func reloadButtonTapped() {","    Just(())","      .delay(for: .seconds(10), scheduler: self.scheduler)","      .flatMap { self.apiClient.fetchEpisodes() }","      .assign(to: &self.$episodes)","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And then in tests use an immediate scheduler:"}]},{"type":"codeListing","syntax":null,"code":["func testViewModel() {","  let viewModel = HomeViewModel(","    apiClient: .mock,","    scheduler: .immediate","  )","","  viewModel.reloadButtonTapped()","","  \/\/ No more waiting...","","  XCTAssert(viewModel.episodes, [Episode(id: 42)])","}"]},{"type":"aside","style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This scheduler can "},{"type":"emphasis","inlineContent":[{"type":"text","text":"not"}]},{"type":"text","text":" be used to test publishers with more complex timing logic,"},{"type":"text","text":" "},{"type":"text","text":"like those that use "},{"type":"codeVoice","code":"Debounce"},{"type":"text","text":", "},{"type":"codeVoice","code":"Throttle"},{"type":"text","text":", or "},{"type":"codeVoice","code":"Timer.Publisher"},{"type":"text","text":", and in fact"},{"type":"text","text":" "},{"type":"codeVoice","code":"ImmediateScheduler"},{"type":"text","text":" will not schedule this work in a defined way. Use a "},{"type":"codeVoice","code":"TestScheduler"},{"type":"text","text":" "},{"type":"text","text":"instead to capture your publisherâ€™s timing behavior."}]}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/combineschedulers\/immediatescheduler"],"traits":[{"interfaceLanguage":"swift"}]}],"relationshipsSections":[{"identifiers":["doc:\/\/co.pointfree.ComposableArchitecture\/7Combine9SchedulerP"],"kind":"relationships","title":"Conforms To","type":"conformsTo"}],"identifier":{"url":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/CombineSchedulers\/ImmediateScheduler","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"A scheduler for performing synchronous actions."}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ImmediateScheduler"}],"title":"ImmediateScheduler","roleHeading":"Structure","role":"symbol","symbolKind":"struct","externalID":"s:17CombineSchedulers18ImmediateSchedulerV","modules":[{"name":"CombineSchedulers"}],"navigatorTitle":[{"kind":"identifier","text":"ImmediateScheduler"}]},"hierarchy":{"paths":[["doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/CombineSchedulers"]]},"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/CombineSchedulers\/ImmediateScheduler\/init(now:)"]},{"title":"Instance Properties","identifiers":["doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/CombineSchedulers\/ImmediateScheduler\/minimumTolerance","doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/CombineSchedulers\/ImmediateScheduler\/now"]},{"title":"Instance Methods","identifiers":["doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/CombineSchedulers\/ImmediateScheduler\/schedule(after:interval:tolerance:options:_:)","doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/CombineSchedulers\/ImmediateScheduler\/schedule(after:tolerance:options:_:)","doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/CombineSchedulers\/ImmediateScheduler\/schedule(options:_:)"]},{"title":"Default Implementations","identifiers":["doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/CombineSchedulers\/ImmediateScheduler\/Scheduler-Implementations"],"generated":true}],"references":{"doc://co.pointfree.ComposableArchitecture/7Combine9SchedulerP":{"type":"unresolvable","title":"Combine.Scheduler","identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/7Combine9SchedulerP"},"doc://co.pointfree.ComposableArchitecture/documentation/CombineSchedulers/ImmediateScheduler/minimumTolerance":{"role":"symbol","title":"minimumTolerance","fragments":[{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"minimumTolerance"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"SchedulerTimeType","preciseIdentifier":"s:17CombineSchedulers18ImmediateSchedulerV0D8TimeTypexmfp"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Stride","preciseIdentifier":"s:Sx6StrideQa"}],"abstract":[],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/CombineSchedulers\/ImmediateScheduler\/minimumTolerance","kind":"symbol","type":"topic","url":"\/documentation\/combineschedulers\/immediatescheduler\/minimumtolerance"},"doc://co.pointfree.ComposableArchitecture/documentation/CombineSchedulers/ImmediateScheduler/schedule(after:tolerance:options:_:)":{"role":"symbol","title":"schedule(after:tolerance:options:_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"schedule"},{"kind":"text","text":"("},{"kind":"externalParam","text":"after"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"SchedulerTimeType","preciseIdentifier":"s:17CombineSchedulers18ImmediateSchedulerV0D8TimeTypexmfp"},{"kind":"text","text":", "},{"kind":"externalParam","text":"tolerance"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"SchedulerTimeType","preciseIdentifier":"s:17CombineSchedulers18ImmediateSchedulerV0D8TimeTypexmfp"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Stride","preciseIdentifier":"s:Sx6StrideQa"},{"kind":"text","text":", "},{"kind":"externalParam","text":"options"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"SchedulerOptions","preciseIdentifier":"s:17CombineSchedulers18ImmediateSchedulerV0D7Optionsq_mfp"},{"kind":"text","text":"?, () -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":")"}],"abstract":[],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/CombineSchedulers\/ImmediateScheduler\/schedule(after:tolerance:options:_:)","kind":"symbol","type":"topic","url":"\/documentation\/combineschedulers\/immediatescheduler\/schedule(after:tolerance:options:_:)"},"doc://co.pointfree.ComposableArchitecture/documentation/CombineSchedulers/ImmediateScheduler/init(now:)":{"role":"symbol","title":"init(now:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"now"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"SchedulerTimeType","preciseIdentifier":"s:17CombineSchedulers18ImmediateSchedulerV0D8TimeTypexmfp"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Creates an immediate test scheduler with the given date."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/CombineSchedulers\/ImmediateScheduler\/init(now:)","kind":"symbol","type":"topic","url":"\/documentation\/combineschedulers\/immediatescheduler\/init(now:)"},"doc://co.pointfree.ComposableArchitecture/documentation/CombineSchedulers/ImmediateScheduler/now":{"role":"symbol","title":"now","fragments":[{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"now"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"SchedulerTimeType","preciseIdentifier":"s:17CombineSchedulers18ImmediateSchedulerV0D8TimeTypexmfp"}],"abstract":[],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/CombineSchedulers\/ImmediateScheduler\/now","kind":"symbol","type":"topic","url":"\/documentation\/combineschedulers\/immediatescheduler\/now"},"doc://co.pointfree.ComposableArchitecture/documentation/CombineSchedulers/ImmediateScheduler/schedule(options:_:)":{"role":"symbol","title":"schedule(options:_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"schedule"},{"kind":"text","text":"("},{"kind":"externalParam","text":"options"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"SchedulerOptions","preciseIdentifier":"s:17CombineSchedulers18ImmediateSchedulerV0D7Optionsq_mfp"},{"kind":"text","text":"?, () -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":")"}],"abstract":[],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/CombineSchedulers\/ImmediateScheduler\/schedule(options:_:)","kind":"symbol","type":"topic","url":"\/documentation\/combineschedulers\/immediatescheduler\/schedule(options:_:)"},"doc://co.pointfree.ComposableArchitecture/documentation/CombineSchedulers/ImmediateScheduler/Scheduler-Implementations":{"role":"collectionGroup","title":"Scheduler Implementations","abstract":[],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/CombineSchedulers\/ImmediateScheduler\/Scheduler-Implementations","kind":"article","type":"topic","url":"\/documentation\/combineschedulers\/immediatescheduler\/scheduler-implementations"},"doc://co.pointfree.ComposableArchitecture/documentation/CombineSchedulers/ImmediateScheduler":{"role":"symbol","title":"ImmediateScheduler","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ImmediateScheduler"}],"abstract":[{"type":"text","text":"A scheduler for performing synchronous actions."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/CombineSchedulers\/ImmediateScheduler","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ImmediateScheduler"}],"url":"\/documentation\/combineschedulers\/immediatescheduler"},"doc://co.pointfree.ComposableArchitecture/documentation/CombineSchedulers":{"role":"collection","title":"CombineSchedulers","abstract":[],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/CombineSchedulers","kind":"symbol","type":"topic","url":"\/documentation\/combineschedulers"},"doc://co.pointfree.ComposableArchitecture/documentation/CombineSchedulers/ImmediateScheduler/schedule(after:interval:tolerance:options:_:)":{"role":"symbol","title":"schedule(after:interval:tolerance:options:_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"schedule"},{"kind":"text","text":"("},{"kind":"externalParam","text":"after"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"SchedulerTimeType","preciseIdentifier":"s:17CombineSchedulers18ImmediateSchedulerV0D8TimeTypexmfp"},{"kind":"text","text":", "},{"kind":"externalParam","text":"interval"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"SchedulerTimeType","preciseIdentifier":"s:17CombineSchedulers18ImmediateSchedulerV0D8TimeTypexmfp"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Stride","preciseIdentifier":"s:Sx6StrideQa"},{"kind":"text","text":", "},{"kind":"externalParam","text":"tolerance"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"SchedulerTimeType","preciseIdentifier":"s:17CombineSchedulers18ImmediateSchedulerV0D8TimeTypexmfp"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Stride","preciseIdentifier":"s:Sx6StrideQa"},{"kind":"text","text":", "},{"kind":"externalParam","text":"options"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"SchedulerOptions","preciseIdentifier":"s:17CombineSchedulers18ImmediateSchedulerV0D7Optionsq_mfp"},{"kind":"text","text":"?, () -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Cancellable","preciseIdentifier":"s:7Combine11CancellableP"}],"abstract":[],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/CombineSchedulers\/ImmediateScheduler\/schedule(after:interval:tolerance:options:_:)","kind":"symbol","type":"topic","url":"\/documentation\/combineschedulers\/immediatescheduler\/schedule(after:interval:tolerance:options:_:)"}}}