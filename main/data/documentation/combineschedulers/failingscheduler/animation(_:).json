{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"animation"},{"kind":"text","text":"("},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"animation"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Animation","preciseIdentifier":"s:7SwiftUI9AnimationV"},{"kind":"text","text":"? = .default) -> "},{"kind":"typeIdentifier","identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/CombineSchedulers\/AnySchedulerOf","preciseIdentifier":"s:17CombineSchedulers14AnySchedulerOfa","text":"AnySchedulerOf"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":">"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"return-value","level":2,"type":"heading","text":"Return Value"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A scheduler that performs an animation when a scheduled action is run."}]}]},{"kind":"parameters","parameters":[{"name":"animation","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"An animation to be performed."}]}]}]},{"kind":"content","content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, if you load some asynchronous data in an "},{"type":"codeVoice","code":"ObservableObject"},{"type":"text","text":" and then"},{"type":"text","text":" "},{"type":"text","text":"pipe its output into a "},{"type":"codeVoice","code":"@Published"},{"type":"text","text":" field, you may be tempted to use the "},{"type":"codeVoice","code":".assign(to:)"},{"type":"text","text":" "},{"type":"text","text":"operator:"}]},{"type":"codeListing","syntax":null,"code":["class ViewModel: ObservableObject {","  @Published var articles: [Article] = []","","  init() {","    apiClient.loadArticles()","      .receive(on: DispatchQueue.main)","      .assign(to: &self.$articles)","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, this prevents you from wrapping the "},{"type":"codeVoice","code":"articles"},{"type":"text","text":" mutation in "},{"type":"codeVoice","code":"withAnimation"},{"type":"text","text":" since"},{"type":"text","text":" "},{"type":"text","text":"that is hidden from you in the "},{"type":"codeVoice","code":".assign(to:)"},{"type":"text","text":" operator. In this situation you can simply"},{"type":"text","text":" "},{"type":"text","text":"use the "},{"type":"codeVoice","code":".animation"},{"type":"text","text":" operator on "},{"type":"codeVoice","code":"Scheduler"},{"type":"text","text":" to transform "},{"type":"codeVoice","code":"DispatchQueue.main"},{"type":"text","text":" into a"},{"type":"text","text":" "},{"type":"text","text":"scheduler that performs its work inside "},{"type":"codeVoice","code":"withAnimation"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":null,"code":["class ViewModel: ObservableObject {","  @Published var articles: [Article] = []","","  init() {","    apiClient.loadArticles()","      .receive(on: DispatchQueue.main.animation())","      .assign(to: &self.$articles)","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Another common use case is when you have a Combine publisher made up of many publishers"},{"type":"text","text":" "},{"type":"text","text":"that have been merged or concatenated. You may want to animate the outputs of each of"},{"type":"text","text":" "},{"type":"text","text":"those publishers differently:"}]},{"type":"codeListing","syntax":null,"code":["class ViewModel: ObservableObject {","  @Published var articles: [Article] = []","","  init() {","    cachedArticles()","      \/\/ Don't animate cached articles when they load","      .receive(on: DispatchQueue.main.animation(nil))","      .append(","        apiClient.loadArticles()","          \/\/ Animate the fresh articles when they load","          .receive(on: DispatchQueue.main.animation())","      )","  }","}"]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/combineschedulers\/failingscheduler\/animation(_:)"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/CombineSchedulers\/FailingScheduler\/animation(_:)","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Specifies an animation to perform when an action is scheduled. This can be useful for times"},{"type":"text","text":" "},{"type":"text","text":"that you cannot easily wrap state mutations in a "},{"type":"codeVoice","code":"withAnimation"},{"type":"text","text":" block."}],"kind":"symbol","metadata":{"role":"symbol","title":"animation(_:)","roleHeading":"Instance Method","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"animation"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Animation","preciseIdentifier":"s:7SwiftUI9AnimationV"},{"kind":"text","text":"?) -> "},{"kind":"typeIdentifier","text":"AnySchedulerOf","preciseIdentifier":"s:17CombineSchedulers14AnySchedulerOfa"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":">"}],"symbolKind":"method","externalID":"s:7Combine9SchedulerP0A10SchedulersE9animationyAD03AnyB0Vy0B8TimeTypeQz0B7OptionsQzG7SwiftUI9AnimationVSgF::SYNTHESIZED::s:17CombineSchedulers16FailingSchedulerV","extendedModule":"Combine","modules":[{"name":"CombineSchedulers"}]},"hierarchy":{"paths":[["doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/CombineSchedulers","doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/CombineSchedulers\/FailingScheduler","doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/CombineSchedulers\/FailingScheduler\/Scheduler-Implementations"]]},"references":{"doc://co.pointfree.ComposableArchitecture/documentation/CombineSchedulers/FailingScheduler":{"role":"symbol","title":"FailingScheduler","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"FailingScheduler"}],"abstract":[{"type":"text","text":"A scheduler that causes the current XCTest test case to fail if it is used."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/CombineSchedulers\/FailingScheduler","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"FailingScheduler"}],"url":"\/documentation\/combineschedulers\/failingscheduler"},"doc://co.pointfree.ComposableArchitecture/documentation/CombineSchedulers":{"role":"collection","title":"CombineSchedulers","abstract":[],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/CombineSchedulers","kind":"symbol","type":"topic","url":"\/documentation\/combineschedulers"},"doc://co.pointfree.ComposableArchitecture/documentation/CombineSchedulers/AnySchedulerOf":{"role":"symbol","title":"AnySchedulerOf","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnySchedulerOf"}],"abstract":[{"type":"text","text":"A convenience type to specify an "},{"type":"codeVoice","code":"AnyScheduler"},{"type":"text","text":" by the scheduler it wraps rather than by the"},{"type":"text","text":" "},{"type":"text","text":"time type and options type."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/CombineSchedulers\/AnySchedulerOf","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"AnySchedulerOf"}],"url":"\/documentation\/combineschedulers\/anyschedulerof"},"doc://co.pointfree.ComposableArchitecture/documentation/CombineSchedulers/FailingScheduler/Scheduler-Implementations":{"role":"collectionGroup","title":"Scheduler Implementations","abstract":[],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/CombineSchedulers\/FailingScheduler\/Scheduler-Implementations","kind":"article","type":"topic","url":"\/documentation\/combineschedulers\/failingscheduler\/scheduler-implementations"},"doc://co.pointfree.ComposableArchitecture/documentation/CombineSchedulers/FailingScheduler/animation(_:)":{"role":"symbol","title":"animation(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"animation"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Animation","preciseIdentifier":"s:7SwiftUI9AnimationV"},{"kind":"text","text":"?) -> "},{"kind":"typeIdentifier","text":"AnySchedulerOf","preciseIdentifier":"s:17CombineSchedulers14AnySchedulerOfa"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Specifies an animation to perform when an action is scheduled. This can be useful for times"},{"type":"text","text":" "},{"type":"text","text":"that you cannot easily wrap state mutations in a "},{"type":"codeVoice","code":"withAnimation"},{"type":"text","text":" block."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/CombineSchedulers\/FailingScheduler\/animation(_:)","kind":"symbol","type":"topic","url":"\/documentation\/combineschedulers\/failingscheduler\/animation(_:)"}}}