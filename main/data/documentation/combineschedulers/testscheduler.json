{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"final"},{"kind":"text","text":" "},{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"TestScheduler"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"SchedulerTimeType"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"SchedulerOptions"},{"kind":"text","text":"> "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"SchedulerTimeType"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","text":"Strideable","preciseIdentifier":"s:Sx"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"SchedulerTimeType"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Stride"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","text":"SchedulerTimeIntervalConvertible","preciseIdentifier":"s:7Combine32SchedulerTimeIntervalConvertibleP"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This scheduler is useful for testing how the flow of time effects publishers that use"},{"type":"text","text":" "},{"type":"text","text":"asynchronous operators, such as "},{"type":"codeVoice","code":"debounce"},{"type":"text","text":", "},{"type":"codeVoice","code":"throttle"},{"type":"text","text":", "},{"type":"codeVoice","code":"delay"},{"type":"text","text":", "},{"type":"codeVoice","code":"timeout"},{"type":"text","text":", "},{"type":"codeVoice","code":"receive(on:)"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"subscribe(on:)"},{"type":"text","text":" and more."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, consider the following "},{"type":"codeVoice","code":"race"},{"type":"text","text":" operator that runs two futures in parallel, but"},{"type":"text","text":" "},{"type":"text","text":"only emits the first one that completes:"}]},{"type":"codeListing","syntax":null,"code":["func race<Output, Failure: Error>(","  _ first: Future<Output, Failure>,","  _ second: Future<Output, Failure>",") -> AnyPublisher<Output, Failure> {","  first","    .merge(with: second)","    .prefix(1)","    .eraseToAnyPublisher()","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Although this publisher is quite simple we may still want to write some tests for it."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To do this we can create a test scheduler and create two futures, one that emits after a"},{"type":"text","text":" "},{"type":"text","text":"second and one that emits after two seconds:"}]},{"type":"codeListing","syntax":null,"code":["let scheduler = DispatchQueue.test","let first = Future<Int, Never> { callback in","  scheduler.schedule(after: scheduler.now.advanced(by: 1)) { callback(.success(1)) }","}","let second = Future<Int, Never> { callback in","  scheduler.schedule(after: scheduler.now.advanced(by: 2)) { callback(.success(2)) }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And then we can race these futures and collect their emissions into an array:"}]},{"type":"codeListing","syntax":null,"code":["var output: [Int] = []","let cancellable = race(first, second).sink { output.append($0) }"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And then we can deterministically move time forward in the scheduler to see how the publisher"},{"type":"text","text":" "},{"type":"text","text":"emits. We can start by moving time forward by one second:"}]},{"type":"codeListing","syntax":null,"code":["scheduler.advance(by: 1)","XCTAssertEqual(output, [1])"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This proves that we get the first emission from the publisher since one second of time has"},{"type":"text","text":" "},{"type":"text","text":"passed. If we further advance by one more second we can prove that we do not get anymore"},{"type":"text","text":" "},{"type":"text","text":"emissions:"}]},{"type":"codeListing","syntax":null,"code":["scheduler.advance(by: 1)","XCTAssertEqual(output, [1])"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This is a very simple example of how to control the flow of time with the test scheduler,"},{"type":"text","text":" "},{"type":"text","text":"but this technique can be used to test any publisher that involves Combineâ€™s asynchronous"},{"type":"text","text":" "},{"type":"text","text":"operations."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/combineschedulers\/testscheduler"],"traits":[{"interfaceLanguage":"swift"}]}],"relationshipsSections":[{"identifiers":["doc:\/\/co.pointfree.ComposableArchitecture\/7Combine9SchedulerP"],"kind":"relationships","title":"Conforms To","type":"conformsTo"}],"identifier":{"url":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/CombineSchedulers\/TestScheduler","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"A scheduler whose current time and execution can be controlled in a deterministic manner."}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"TestScheduler"}],"title":"TestScheduler","roleHeading":"Class","role":"symbol","symbolKind":"class","externalID":"s:17CombineSchedulers13TestSchedulerC","modules":[{"name":"CombineSchedulers"}],"navigatorTitle":[{"kind":"identifier","text":"TestScheduler"}]},"hierarchy":{"paths":[["doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/CombineSchedulers"]]},"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/CombineSchedulers\/TestScheduler\/init(now:)"]},{"title":"Instance Properties","identifiers":["doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/CombineSchedulers\/TestScheduler\/minimumTolerance","doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/CombineSchedulers\/TestScheduler\/now"]},{"title":"Instance Methods","identifiers":["doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/CombineSchedulers\/TestScheduler\/advance(by:)","doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/CombineSchedulers\/TestScheduler\/run()","doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/CombineSchedulers\/TestScheduler\/schedule(after:interval:tolerance:options:_:)","doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/CombineSchedulers\/TestScheduler\/schedule(after:tolerance:options:_:)","doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/CombineSchedulers\/TestScheduler\/schedule(options:_:)"]},{"title":"Default Implementations","identifiers":["doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/CombineSchedulers\/TestScheduler\/Scheduler-Implementations"],"generated":true}],"references":{"doc://co.pointfree.ComposableArchitecture/documentation/CombineSchedulers":{"role":"collection","title":"CombineSchedulers","abstract":[],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/CombineSchedulers","kind":"symbol","type":"topic","url":"\/documentation\/combineschedulers"},"doc://co.pointfree.ComposableArchitecture/documentation/CombineSchedulers/TestScheduler/schedule(after:tolerance:options:_:)":{"role":"symbol","title":"schedule(after:tolerance:options:_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"schedule"},{"kind":"text","text":"("},{"kind":"externalParam","text":"after"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"SchedulerTimeType","preciseIdentifier":"s:17CombineSchedulers13TestSchedulerC0D8TimeTypexmfp"},{"kind":"text","text":", "},{"kind":"externalParam","text":"tolerance"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"SchedulerTimeType","preciseIdentifier":"s:17CombineSchedulers13TestSchedulerC0D8TimeTypexmfp"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Stride","preciseIdentifier":"s:Sx6StrideQa"},{"kind":"text","text":", "},{"kind":"externalParam","text":"options"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"SchedulerOptions","preciseIdentifier":"s:17CombineSchedulers13TestSchedulerC0D7Optionsq_mfp"},{"kind":"text","text":"?, () -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":")"}],"abstract":[],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/CombineSchedulers\/TestScheduler\/schedule(after:tolerance:options:_:)","kind":"symbol","type":"topic","url":"\/documentation\/combineschedulers\/testscheduler\/schedule(after:tolerance:options:_:)"},"doc://co.pointfree.ComposableArchitecture/documentation/CombineSchedulers/TestScheduler/minimumTolerance":{"role":"symbol","title":"minimumTolerance","fragments":[{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"minimumTolerance"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"SchedulerTimeType","preciseIdentifier":"s:17CombineSchedulers13TestSchedulerC0D8TimeTypexmfp"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Stride","preciseIdentifier":"s:Sx6StrideQa"}],"abstract":[],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/CombineSchedulers\/TestScheduler\/minimumTolerance","kind":"symbol","type":"topic","url":"\/documentation\/combineschedulers\/testscheduler\/minimumtolerance"},"doc://co.pointfree.ComposableArchitecture/documentation/CombineSchedulers/TestScheduler/now":{"role":"symbol","title":"now","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"now"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"SchedulerTimeType","preciseIdentifier":"s:17CombineSchedulers13TestSchedulerC0D8TimeTypexmfp"}],"abstract":[],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/CombineSchedulers\/TestScheduler\/now","kind":"symbol","type":"topic","url":"\/documentation\/combineschedulers\/testscheduler\/now"},"doc://co.pointfree.ComposableArchitecture/documentation/CombineSchedulers/TestScheduler/schedule(options:_:)":{"role":"symbol","title":"schedule(options:_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"schedule"},{"kind":"text","text":"("},{"kind":"externalParam","text":"options"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"SchedulerOptions","preciseIdentifier":"s:17CombineSchedulers13TestSchedulerC0D7Optionsq_mfp"},{"kind":"text","text":"?, () -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":")"}],"abstract":[],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/CombineSchedulers\/TestScheduler\/schedule(options:_:)","kind":"symbol","type":"topic","url":"\/documentation\/combineschedulers\/testscheduler\/schedule(options:_:)"},"doc://co.pointfree.ComposableArchitecture/documentation/CombineSchedulers/TestScheduler/Scheduler-Implementations":{"role":"collectionGroup","title":"Scheduler Implementations","abstract":[],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/CombineSchedulers\/TestScheduler\/Scheduler-Implementations","kind":"article","type":"topic","url":"\/documentation\/combineschedulers\/testscheduler\/scheduler-implementations"},"doc://co.pointfree.ComposableArchitecture/documentation/CombineSchedulers/TestScheduler/schedule(after:interval:tolerance:options:_:)":{"role":"symbol","title":"schedule(after:interval:tolerance:options:_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"schedule"},{"kind":"text","text":"("},{"kind":"externalParam","text":"after"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"SchedulerTimeType","preciseIdentifier":"s:17CombineSchedulers13TestSchedulerC0D8TimeTypexmfp"},{"kind":"text","text":", "},{"kind":"externalParam","text":"interval"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"SchedulerTimeType","preciseIdentifier":"s:17CombineSchedulers13TestSchedulerC0D8TimeTypexmfp"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Stride","preciseIdentifier":"s:Sx6StrideQa"},{"kind":"text","text":", "},{"kind":"externalParam","text":"tolerance"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"SchedulerTimeType","preciseIdentifier":"s:17CombineSchedulers13TestSchedulerC0D8TimeTypexmfp"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Stride","preciseIdentifier":"s:Sx6StrideQa"},{"kind":"text","text":", "},{"kind":"externalParam","text":"options"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"SchedulerOptions","preciseIdentifier":"s:17CombineSchedulers13TestSchedulerC0D7Optionsq_mfp"},{"kind":"text","text":"?, () -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Cancellable","preciseIdentifier":"s:7Combine11CancellableP"}],"abstract":[],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/CombineSchedulers\/TestScheduler\/schedule(after:interval:tolerance:options:_:)","kind":"symbol","type":"topic","url":"\/documentation\/combineschedulers\/testscheduler\/schedule(after:interval:tolerance:options:_:)"},"doc://co.pointfree.ComposableArchitecture/7Combine9SchedulerP":{"type":"unresolvable","title":"Combine.Scheduler","identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/7Combine9SchedulerP"},"doc://co.pointfree.ComposableArchitecture/documentation/CombineSchedulers/TestScheduler/run()":{"role":"symbol","title":"run()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"run"},{"kind":"text","text":"()"}],"abstract":[{"type":"text","text":"Runs the scheduler until it has no scheduled items left."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/CombineSchedulers\/TestScheduler\/run()","kind":"symbol","type":"topic","url":"\/documentation\/combineschedulers\/testscheduler\/run()"},"doc://co.pointfree.ComposableArchitecture/documentation/CombineSchedulers/TestScheduler/init(now:)":{"role":"symbol","title":"init(now:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"now"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"SchedulerTimeType","preciseIdentifier":"s:17CombineSchedulers13TestSchedulerC0D8TimeTypexmfp"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Creates a test scheduler with the given date."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/CombineSchedulers\/TestScheduler\/init(now:)","kind":"symbol","type":"topic","url":"\/documentation\/combineschedulers\/testscheduler\/init(now:)"},"doc://co.pointfree.ComposableArchitecture/documentation/CombineSchedulers/TestScheduler/advance(by:)":{"role":"symbol","title":"advance(by:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"advance"},{"kind":"text","text":"("},{"kind":"externalParam","text":"by"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"SchedulerTimeType","preciseIdentifier":"s:17CombineSchedulers13TestSchedulerC0D8TimeTypexmfp"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Stride","preciseIdentifier":"s:Sx6StrideQa"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Advances the scheduler by the given stride."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/CombineSchedulers\/TestScheduler\/advance(by:)","kind":"symbol","type":"topic","url":"\/documentation\/combineschedulers\/testscheduler\/advance(by:)"},"doc://co.pointfree.ComposableArchitecture/documentation/CombineSchedulers/TestScheduler":{"role":"symbol","title":"TestScheduler","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"TestScheduler"}],"abstract":[{"type":"text","text":"A scheduler whose current time and execution can be controlled in a deterministic manner."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/CombineSchedulers\/TestScheduler","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"TestScheduler"}],"url":"\/documentation\/combineschedulers\/testscheduler"}}}