{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"optional"},{"kind":"text","text":"("},{"kind":"externalParam","text":"breakpointOnNil"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":" = true, "},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"file"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":" = "},{"kind":"keyword","text":"#file"},{"kind":"text","text":", "},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"line"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"kind":"text","text":" = "},{"kind":"keyword","text":"#line"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","preciseIdentifier":"s:22ComposableArchitecture7ReducerV","text":"Reducer"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":"?, "},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Environment"},{"kind":"text","text":">"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"return-value","level":2,"type":"heading","text":"Return Value"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A reducer that works on optional state."}]}]},{"kind":"parameters","parameters":[{"name":"breakpointOnNil","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Raises "},{"type":"codeVoice","code":"SIGTRAP"},{"type":"text","text":" signal when an action is sent to the reducer"},{"type":"text","text":" "},{"type":"text","text":"but state is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":". This is generally considered a logic error, as a child reducer cannot"},{"type":"text","text":" "},{"type":"text","text":"process a child action for unavailable child state."}]}]}]},{"kind":"content","content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Often used in tandem with "},{"type":"codeVoice","code":"pullback"},{"type":"text","text":" to transform a reducer on a non-optional child domain"},{"type":"text","text":" "},{"type":"text","text":"into a reducer that can be combined with a reducer on a parent domain that contains some"},{"type":"text","text":" "},{"type":"text","text":"optional child domain:"}]},{"type":"codeListing","syntax":null,"code":["\/\/ Global domain that holds an optional local domain:","struct AppState { var modal: ModalState? }","enum AppAction { case modal(ModalAction) }","struct AppEnvironment { var mainQueue: AnySchedulerOf<DispatchQueue> }","","\/\/ A reducer that works on the non-optional local domain:","let modalReducer = Reducer<ModalState, ModalAction, ModalEnvironment { ... }","","\/\/ Pullback the local modal reducer so that it works on all of the app domain:","let appReducer = Reducer<AppState, AppAction, AppEnvironment>.combine(","  modalReducer.optional().pullback(","    state: \\.modal,","    action: \/AppAction.modal,","    environment: { ModalEnvironment(mainQueue: $0.mainQueue) }","  ),","  Reducer { state, action, environment in","    ...","  }",")"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Take care when combining optional reducers into parent domains. An optional reducer cannot"},{"type":"text","text":" "},{"type":"text","text":"process actions in its domain when its state is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":". If a child action is sent to an"},{"type":"text","text":" "},{"type":"text","text":"optional reducer when child state is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":", it is generally considered a logic error. There"},{"type":"text","text":" "},{"type":"text","text":"are a few ways in which these errors can sneak into a code base:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A parent reducer sets child state to "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" when processing a child action and runs"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"before"}]},{"type":"text","text":" the child reducer:"}]},{"type":"codeListing","syntax":null,"code":["let parentReducer = Reducer<ParentState, ParentAction, ParentEnvironment>.combine(","  \/\/ When combining reducers, the parent reducer runs first","  Reducer { state, action, environment in","    switch action {","    case .child(.didDisappear):","      \/\/ And `nil`s out child state when processing a child action","      state.child = nil","      return .none","    ...","    }","  },","  \/\/ Before the child reducer runs","  childReducer.optional().pullback(...)",")","","let childReducer = Reducer<","  ChildState, ChildAction, ChildEnvironment","> { state, action environment in","  case .didDisappear:","    \/\/ This action is never received here because child state is `nil` in the parent","  ...","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To ensure that a child reducer can process any action that a parent may use to "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" out"},{"type":"text","text":" "},{"type":"text","text":"its state, combine it "},{"type":"emphasis","inlineContent":[{"type":"text","text":"before"}]},{"type":"text","text":" the parent:"}]},{"type":"codeListing","syntax":null,"code":["let parentReducer = Reducer<ParentState, ParentAction, ParentEnvironment>.combine(","  \/\/ The child runs first","  childReducer.optional().pullback(...),","  \/\/ The parent runs after","  Reducer { state, action, environment in","    ...","  }",")"]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A child effect feeds a child action back into the store when child state is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":null,"code":["let childReducer = Reducer<","  ChildState, ChildAction, ChildEnvironment","> { state, action environment in","  switch action {","  case .onAppear:","    \/\/ An effect may want to feed its result back to the child domain in an action","    return environment.apiClient","      .request()","      .map(ChildAction.response)","","  case let .response(response):","    \/\/ But the child cannot process this action if its state is `nil` in the parent","  ...","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"It is perfectly reasonable to ignore the result of an effect when child state is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"for example one-off effects that you donâ€™t want to cancel. However, many long-living"},{"type":"text","text":" "},{"type":"text","text":"effects "},{"type":"emphasis","inlineContent":[{"type":"text","text":"should"}]},{"type":"text","text":" be explicitly canceled when tearing down a child domain:"}]},{"type":"codeListing","syntax":null,"code":["let childReducer = Reducer<","  ChildState, ChildAction, ChildEnvironment","> { state, action environment in","  struct MotionId: Hashable {}","","  switch action {","  case .onAppear:","    \/\/ Mark long-living effects that shouldn't outlive their domain cancellable","    return environment.motionClient","      .start()","      .map(ChildAction.motion)","      .cancellable(id: MotionId())","","  case .onDisappear:","    \/\/ And explicitly cancel them when the domain is torn down","    return .cancel(id: MotionId())","  ...","  }","}"]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A view store sends a child action when child state is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":null,"code":["WithViewStore(self.parentStore) { parentViewStore in","  \/\/ If child state is `nil`, it cannot process this action.","  Button(\"Child Action\") { parentViewStore.send(.child(.action)) }","  ...","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Use "},{"type":"codeVoice","code":"Store.scope"},{"type":"text","text":" with "},{"type":"codeVoice","code":"IfLetStore"},{"type":"text","text":" or "},{"type":"codeVoice","code":"Store.ifLet"},{"type":"text","text":" to ensure that views can only send"},{"type":"text","text":" "},{"type":"text","text":"child actions when the child domain is non-"},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}]},{"type":"codeListing","syntax":null,"code":["IfLetStore(","  self.parentStore.scope(state: { $0.child }, action: { .child($0) }",") { childStore in","  \/\/ This destination only appears when child state is non-`nil`","  WithViewStore(childStore) { childViewStore in","    \/\/ So this action can only be sent when child state is non-`nil`","    Button(\"Child Action\") { childViewStore.send(.action) }","  }","  ...","}"]}]}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"See also: "},{"type":"codeVoice","code":"IfLetStore"},{"type":"text","text":", a SwiftUI helper for transforming a store on optional state into a"},{"type":"text","text":" "},{"type":"text","text":"store on non-optional state."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"See also: "},{"type":"codeVoice","code":"Store.ifLet"},{"type":"text","text":", a UIKit helper for doing imperative work with a store on optional"},{"type":"text","text":" "},{"type":"text","text":"state."}]}]}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/composablearchitecture\/reducer\/optional(breakpointonnil:_:_:)"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/optional(breakpointOnNil:_:_:)","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Transforms a reducer that works on non-optional state into one that works on optional state by"},{"type":"text","text":" "},{"type":"text","text":"only running the non-optional reducer when state is non-nil."}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"optional"},{"kind":"text","text":"("},{"kind":"externalParam","text":"breakpointOnNil"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Reducer","preciseIdentifier":"s:22ComposableArchitecture7ReducerV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":"?, "},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Environment"},{"kind":"text","text":">"}],"title":"optional(breakpointOnNil:_:_:)","roleHeading":"Instance Method","role":"symbol","symbolKind":"method","externalID":"s:22ComposableArchitecture7ReducerV8optional15breakpointOnNil__ACyxSgq_q0_GSb_s12StaticStringVSutF","modules":[{"name":"ComposableArchitecture"}]},"hierarchy":{"paths":[["doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"]]},"references":{"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture/Reducer/optional(breakpointOnNil:_:_:)":{"role":"symbol","title":"optional(breakpointOnNil:_:_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"optional"},{"kind":"text","text":"("},{"kind":"externalParam","text":"breakpointOnNil"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Reducer","preciseIdentifier":"s:22ComposableArchitecture7ReducerV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":"?, "},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Environment"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Transforms a reducer that works on non-optional state into one that works on optional state by"},{"type":"text","text":" "},{"type":"text","text":"only running the non-optional reducer when state is non-nil."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/optional(breakpointOnNil:_:_:)","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/reducer\/optional(breakpointonnil:_:_:)"},"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture/Reducer":{"role":"symbol","title":"Reducer","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Reducer"}],"abstract":[{"type":"text","text":"A reducer describes how to evolve the current state of an application to the next state, given"},{"type":"text","text":" "},{"type":"text","text":"an action, and describes what "},{"type":"codeVoice","code":"Effect"},{"type":"text","text":"s should be executed later by the store, if any."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Reducer"}],"url":"\/documentation\/composablearchitecture\/reducer"},"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture":{"role":"collection","title":"ComposableArchitecture","abstract":[],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture"}}}