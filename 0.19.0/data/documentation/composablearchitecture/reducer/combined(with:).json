{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"combined"},{"kind":"text","text":"("},{"kind":"externalParam","text":"with"},{"kind":"text","text":" "},{"kind":"internalParam","text":"other"},{"kind":"text","text":": "},{"kind":"typeIdentifier","identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","preciseIdentifier":"s:22ComposableArchitecture7ReducerV","text":"Reducer"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Environment"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","preciseIdentifier":"s:22ComposableArchitecture7ReducerV","text":"Reducer"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Environment"},{"kind":"text","text":">"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"return-value","level":2,"type":"heading","text":"Return Value"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A single reducer."}]}]},{"kind":"parameters","parameters":[{"name":"other","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Another reducer."}]}]}]},{"kind":"content","content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"It is important to note that the order of combining reducers matter. Combining "},{"type":"codeVoice","code":"reducerA"},{"type":"text","text":" with"},{"type":"text","text":" "},{"type":"codeVoice","code":"reducerB"},{"type":"text","text":" is not necessarily the same as combining "},{"type":"codeVoice","code":"reducerB"},{"type":"text","text":" with "},{"type":"codeVoice","code":"reducerA"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This can become an issue when working with reducers that have overlapping domains. For"},{"type":"text","text":" "},{"type":"text","text":"example, if "},{"type":"codeVoice","code":"reducerA"},{"type":"text","text":" embeds the domain of "},{"type":"codeVoice","code":"reducerB"},{"type":"text","text":" and reacts to its actions or modifies"},{"type":"text","text":" "},{"type":"text","text":"its state, it can make a difference if "},{"type":"codeVoice","code":"reducerA"},{"type":"text","text":" chooses to modify "},{"type":"codeVoice","code":"reducerB"},{"type":"text","text":"â€™s state"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"before"}]},{"type":"text","text":" or "},{"type":"emphasis","inlineContent":[{"type":"text","text":"after"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"reducerB"},{"type":"text","text":" runs."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This is perhaps most easily seen when working with "},{"type":"codeVoice","code":"optional"},{"type":"text","text":" reducers, where the parent"},{"type":"text","text":" "},{"type":"text","text":"domain may listen to the child domain and "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" out its state. If the parent reducer runs"},{"type":"text","text":" "},{"type":"text","text":"before the child reducer, then the child reducer will not be able to react to its own action."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Similar can be said for a "},{"type":"codeVoice","code":"forEach"},{"type":"text","text":" reducer. If the parent domain modifies the child"},{"type":"text","text":" "},{"type":"text","text":"collection by moving, removing, or modifying an element before the "},{"type":"codeVoice","code":"forEach"},{"type":"text","text":" reducer runs, the"},{"type":"text","text":" "},{"type":"codeVoice","code":"forEach"},{"type":"text","text":" reducer may perform its action against the wrong element, an element that no longer"},{"type":"text","text":" "},{"type":"text","text":"exists, or an element in an unexpected state."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Running a parent reducer before a child reducer can be considered an application logic"},{"type":"text","text":" "},{"type":"text","text":"error, and can produce assertion failures. So you should almost always combine reducers in"},{"type":"text","text":" "},{"type":"text","text":"order from child to parent domain."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here is an example of how you should combine an "},{"type":"codeVoice","code":"optional"},{"type":"text","text":" reducer with a parent domain:"}]},{"type":"codeListing","syntax":null,"code":["let parentReducer: Reducer<ParentState, ParentAction, ParentEnvironment> =","  \/\/ Run before parent so that it can react to `.dismiss` while state is non-`nil`.","  childReducer","    .optional()","    .pullback(","      state: \\.child,","      action: \/ParentAction.child,","      environment: { $0.child }","    )","    \/\/ Combined after child so that it can `nil` out child state upon `.child(.dismiss)`.","    .combined(","      with: Reducer { state, action, environment in","        switch action","        case .child(.dismiss):","          state.child = nil","          return .none","        ...","        }","      }","    )"]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/composablearchitecture\/reducer\/combined(with:)"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/combined(with:)","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Combines many reducers into a single one by running each one on state in order, and merging"},{"type":"text","text":" "},{"type":"text","text":"all of the effects."}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"combined"},{"kind":"text","text":"("},{"kind":"externalParam","text":"with"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Reducer","preciseIdentifier":"s:22ComposableArchitecture7ReducerV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Environment"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"Reducer","preciseIdentifier":"s:22ComposableArchitecture7ReducerV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Environment"},{"kind":"text","text":">"}],"title":"combined(with:)","roleHeading":"Instance Method","role":"symbol","symbolKind":"method","externalID":"s:22ComposableArchitecture7ReducerV8combined4withACyxq_q0_GAF_tF","modules":[{"name":"ComposableArchitecture"}]},"hierarchy":{"paths":[["doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"]]},"references":{"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture/Reducer/combined(with:)":{"role":"symbol","title":"combined(with:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"combined"},{"kind":"text","text":"("},{"kind":"externalParam","text":"with"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Reducer","preciseIdentifier":"s:22ComposableArchitecture7ReducerV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Environment"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"Reducer","preciseIdentifier":"s:22ComposableArchitecture7ReducerV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Environment"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Combines many reducers into a single one by running each one on state in order, and merging"},{"type":"text","text":" "},{"type":"text","text":"all of the effects."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/combined(with:)","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/reducer\/combined(with:)"},"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture":{"role":"collection","title":"ComposableArchitecture","abstract":[],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture"},"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture/Reducer":{"role":"symbol","title":"Reducer","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Reducer"}],"abstract":[{"type":"text","text":"A reducer describes how to evolve the current state of an application to the next state, given"},{"type":"text","text":" "},{"type":"text","text":"an action, and describes what "},{"type":"codeVoice","code":"Effect"},{"type":"text","text":"s should be executed later by the store, if any."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Reducer"}],"url":"\/documentation\/composablearchitecture\/reducer"}}}