{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"final"},{"kind":"text","text":" "},{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"TestStore"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"State"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"LocalState"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Action"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"LocalAction"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Environment"},{"kind":"text","text":"> "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","text":"Equatable","preciseIdentifier":"s:SQ"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, given a simple counter reducer:"}]},{"type":"codeListing","syntax":null,"code":["enum CounterAction: Equatable {","  case decrementButtonTapped","  case incrementButtonTapped","}","","let counterReducer = Reducer<Int, CounterAction, Void> { count, action, _ in","  switch action {","  case .decrementButtonTapped:","    count -= 1","    return .none","  case .incrementButtonTapped:","    count += 1","    return .none","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"One can assert against its behavior over time:"}]},{"type":"codeListing","syntax":null,"code":["class CounterTests: XCTestCase {","  func testCounter() {","    let store = TestStore(","      initialState: 0,                \/\/ GIVEN counter state of 0","      reducer: counterReducer,","      environment: ()","    )","","    store.assert(","      .send(.incrementButtonTapped) { \/\/ WHEN the increment button is tapped","        $0 = 1                        \/\/ THEN the count should be 1","      }","    )","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For a more complex example, including timing and effects, consider the following bare-bones"},{"type":"text","text":" "},{"type":"text","text":"search feature:"}]},{"type":"codeListing","syntax":null,"code":["struct SearchState: Equatable {","  var query = \"\"","  var results: [String] = []","}","enum SearchAction: Equatable {","  case queryChanged(String)","  case response([String])","}","struct SearchEnvironment {","  var mainQueue: AnySchedulerOf<DispatchQueue>","  var request: (String) -> Effect<[String], Never>","}","let searchReducer = Reducer<","  SearchState, SearchAction, SearchEnvironment","> { state, action, environment in","","  \/\/ A local identifier for debouncing and canceling the search request effect.","  struct SearchId: Hashable {}","","  switch action {","  case let .queryChanged(query):","    state.query = query","    return environment.request(self.query)","      .debounce(id: SearchId(), for: 0.5, scheduler: environment.mainQueue)","  case let .response(results):","    state.results = results","    return .none","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"It can be fully tested by controlling the environmentâ€™s scheduler and effect:"}]},{"type":"codeListing","syntax":null,"code":["\/\/ Create a test dispatch scheduler to control the timing of effects","let scheduler = DispatchQueue.testScheduler","","let store = TestStore(","  initialState: SearchState(),","  reducer: searchReducer,","  environment: SearchEnvironment(","    \/\/ Wrap the test scheduler in a type-erased scheduler","    mainQueue: scheduler.eraseToAnyScheduler(),","    \/\/ Simulate a search response with one item","    request: { _ in Effect(value: [\"Composable Architecture\"]) }","  )",")","store.assert(","  \/\/ Change the query","  .send(.searchFieldChanged(\"c\") {","    \/\/ Assert that state updates accordingly","    $0.query = \"c\"","  },","  \/\/ Advance the scheduler by a period shorter than the debounce","  .do { scheduler.advance(by: 0.25) },","  \/\/ Change the query again","  .send(.searchFieldChanged(\"co\") {","    $0.query = \"co\"","  },","  \/\/ Advance the scheduler by a period shorter than the debounce","  .do { scheduler.advance(by: 0.25) },","  \/\/ Advance the scheduler to the debounce","  .do { scheduler.advance(by: 0.25) },","  \/\/ Assert that the expected response is received","  .receive(.response([\"Composable Architecture\"])) {","    \/\/ Assert that state updates accordingly","    $0.results = [\"Composable Architecture\"]","  }",")"]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/composablearchitecture\/teststore"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"A testable runtime for a reducer."}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"TestStore"}],"title":"TestStore","roleHeading":"Class","role":"symbol","symbolKind":"class","externalID":"s:22ComposableArchitecture9TestStoreC","modules":[{"name":"ComposableArchitecture"}],"navigatorTitle":[{"kind":"identifier","text":"TestStore"}]},"hierarchy":{"paths":[["doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture"]]},"topicSections":[{"title":"Structures","identifiers":["doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/Step"]},{"title":"Initializers","identifiers":["doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/init(initialState:reducer:environment:)"]},{"title":"Instance Methods","identifiers":["doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/assert(_:file:line:)-5hg90","doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/assert(_:file:line:)-8fnf0","doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/scope(state:)","doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/scope(state:action:)"]}],"references":{"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture/TestStore/scope(state:action:)":{"conformance":{"constraints":[{"type":"codeVoice","code":"Action"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"scope(state:action:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"scope"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"S"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"A"},{"kind":"text","text":">("},{"kind":"externalParam","text":"state"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"LocalState"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"S"},{"kind":"text","text":", "},{"kind":"externalParam","text":"action"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"A"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"LocalAction"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"TestStore","preciseIdentifier":"s:22ComposableArchitecture9TestStoreC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"S"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"A"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Environment"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Scopes a store to assert against more local state and actions."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/scope(state:action:)","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/teststore\/scope(state:action:)"},"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture":{"role":"collection","title":"ComposableArchitecture","abstract":[],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture"},"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture/TestStore":{"role":"symbol","title":"TestStore","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"TestStore"}],"abstract":[{"type":"text","text":"A testable runtime for a reducer."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"TestStore"}],"url":"\/documentation\/composablearchitecture\/teststore"},"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture/TestStore/assert(_:file:line:)-8fnf0":{"conformance":{"constraints":[{"type":"codeVoice","code":"LocalState"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Action"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"assert(_:file:line:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"assert"},{"kind":"text","text":"(["},{"kind":"typeIdentifier","text":"TestStore","preciseIdentifier":"s:22ComposableArchitecture9TestStoreC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"LocalState"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"LocalAction"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Environment"},{"kind":"text","text":">."},{"kind":"typeIdentifier","text":"Step","preciseIdentifier":"s:22ComposableArchitecture9TestStoreC4StepV"},{"kind":"text","text":"], "},{"kind":"externalParam","text":"file"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Asserts against an array of actions."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/assert(_:file:line:)-8fnf0","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/teststore\/assert(_:file:line:)-8fnf0"},"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture/TestStore/scope(state:)":{"conformance":{"constraints":[{"type":"codeVoice","code":"Action"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"scope(state:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"scope"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"S"},{"kind":"text","text":">("},{"kind":"externalParam","text":"state"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"LocalState"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"S"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"TestStore","preciseIdentifier":"s:22ComposableArchitecture9TestStoreC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"S"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"LocalAction"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Environment"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Scopes a store to assert against more local state."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/scope(state:)","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/teststore\/scope(state:)"},"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture/TestStore/assert(_:file:line:)-5hg90":{"conformance":{"constraints":[{"type":"codeVoice","code":"LocalState"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Action"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"assert(_:file:line:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"assert"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"TestStore","preciseIdentifier":"s:22ComposableArchitecture9TestStoreC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"LocalState"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"LocalAction"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Environment"},{"kind":"text","text":">."},{"kind":"typeIdentifier","text":"Step","preciseIdentifier":"s:22ComposableArchitecture9TestStoreC4StepV"},{"kind":"text","text":"..., "},{"kind":"externalParam","text":"file"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Asserts against a script of actions."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/assert(_:file:line:)-5hg90","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/teststore\/assert(_:file:line:)-5hg90"},"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture/TestStore/Step":{"conformance":{"constraints":[{"type":"codeVoice","code":"Action"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"TestStore.Step","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Step"}],"abstract":[{"type":"text","text":"A single step of a "},{"type":"codeVoice","code":"TestStore"},{"type":"text","text":" assertion."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/Step","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Step"}],"url":"\/documentation\/composablearchitecture\/teststore\/step"},"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture/TestStore/init(initialState:reducer:environment:)":{"conformance":{"constraints":[{"type":"codeVoice","code":"State"},{"type":"text","text":" is "},{"type":"codeVoice","code":"LocalState"},{"type":"text","text":", "},{"type":"codeVoice","code":"Action"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":", and "},{"type":"codeVoice","code":"Action"},{"type":"text","text":" is "},{"type":"codeVoice","code":"LocalAction"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"init(initialState:reducer:environment:)","fragments":[{"kind":"keyword","text":"convenience"},{"kind":"text","text":" "},{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"initialState"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":", "},{"kind":"externalParam","text":"reducer"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Reducer","preciseIdentifier":"s:22ComposableArchitecture7ReducerV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Environment"},{"kind":"text","text":">, "},{"kind":"externalParam","text":"environment"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Environment"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Initializes a test store from an initial state, a reducer, and an initial environment."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/init(initialState:reducer:environment:)","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/teststore\/init(initialstate:reducer:environment:)"}}}